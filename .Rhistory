ylab("Probability")+
xlab("Stressor value x")+
theme_classic()+
theme(axis.text = element_blank(),
axis.ticks =  element_blank())
plstress
ggsave(plstress, filename="plstress.jpeg", dpi=600,
width = 80, height = 60, units = "mm")
plstress <- ggplot(data.frame(x, y),aes(x, y))+
geom_line()+
geom_point(aes(x[which.max(y)], max(y)), size=4, col="tomato3")+
annotate("text", x=x[which.max(y)]+500, y=max(y), label=expression("P("*X[optimum]~"=x)"))+
ylab("Probability")+
xlab("Stressor value x")+
theme_classic()+
theme(axis.text = element_blank(),
axis.ticks =  element_blank())
ggsave(plstress, filename="plstress.jpeg", dpi=600,
width = 120, height = 60, units = "mm")
factorial(5)
1*2*3*4*5
factorial(5)/500
#state the cover of S. pectinata is 100% in a quadrant then
factorial(5) #or 1*1+1*2+1*3+1*4+1*5
factorial(5)/500
1*1+1*2+1*3+1*4+1*5
(1*1+1*2+1*3+1*4+1*5)/500
(100*1+100*2+100*3+100*4+1000*5)/500
(100*1+100*2+100*3+100*4+100*5)/500
dfexamp     <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
library(readxl)
dfexamp     <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
hist(dfexamp)
hist(dfexamp$hedges_g)
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40)
library(readxl)
library(ggplot2)
dfexamp     <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
hist(dfexamp$hedges_g)
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40)
abs(fexamp$hedges_g)>25
abs(dfexamp$hedges_g)>25
library(readxl)
library(ggplot2)
dfexamp <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
dfexamp <- [abs(dfexamp$hedges_g)>25,]
dfexamp <- dfexamp[abs(dfexamp$hedges_g)>25,]
hist(dfexamp$hedges_g)
library(readxl)
library(ggplot2)
dfexamp <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
dfexamp <- dfexamp[abs(dfexamp$hedges_g)<25,]
hist(dfexamp$hedges_g)
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40)
library(readxl)
library(ggplot2)
dfexamp <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
dfexamp <- dfexamp[abs(dfexamp$hedges_g)<10,]
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40)
library(readxl)
library(ggplot2)
dfexamp <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
dfexamp <- dfexamp[abs(dfexamp$hedges_g)<7,]
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40)
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")
library(readxl)
library(ggplot2)
dfexamp <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
library(readxl)
library(ggplot2)
dfexamp <- read_excel("C:/Users/admin/OneDrive/Bureaublad/Epistemology/Data/cors.xlsx", sheet=2)
dfexamp <- dfexamp[abs(dfexamp$hedges_g)<7,]
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")
library(MASS)
fitdistr(dfexamp$hedges_g, densfun = "cauchy")
rcauchy(0, 0.55)
hist(rcauchy(10000, 0, 0.55))
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")
x <- seq(-8,8,0.01)
dcauchy(x, 0, 0.55)
y <- dcauchy(x, 0, 0.55)
plot(x,  y)
1/2.5^2
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")
geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y))
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")+
geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y))
x <- seq(-8,8,0.01)
y <- dcauchy(x, 0, 0.55)/max( dcauchy(x, 0, 0.55))
x <- seq(-8,8,0.01)
y <- dcauchy(x, 0, 0.55)/max(dcauchy(x, 0, 0.55))*2000
ggplot(data=dfexamp, aes(hedges_g))+
geom_histogram(bins=40, col="black", fill="grey")+
geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y))
rcauchy(n, 0, 0.55)
rcauchy(1, 0, 0.55)
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
sig_select=0, n_samp=30, nsim=100, seed=666){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
set.seed(seed)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df         <- setNames(as.data.frame(df), c("x", "y", "z", "s"))
replace_p  <- which(abs(df$x/df$s)<abs(qnorm(theoretical_alpha/2)))
replace_p  <- sample(replace_p, nsim*sig_select)
for (i in replace_p) {
repeat {
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2) / length(y))) / sqrt(length(y))
test_stat <- abs(mean(y) / (se * z_adj))
if (test_stat > 1.96) break
}
df[i,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
mu <- rcauchy(1, 0, 0.55)
sd(dfexamp$hedges_g)
rnbinom(1, mu=30, sd=1-(30^2/(30^2-30)))
rnbinom(1, mu=30, sd=c(1-(30^2/(30^2-30))))
rnbinom(1, mu=30, size=c(1-(30^2/(30^2-30))))
c(1-(30^2/(30^2-30)))
30^2
30^2/30^2-30
30^2 / (30^2 - 30)
rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
long_err(mu=mu, sd=1, nsamp, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, nsim = 1000)
sims <- long_err(mu=mu, sd=1, n_samp=ns, nsim = 1000)
sims$t
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
sims <- long_err(mu=mu, sd=1, n_samp=ns, nsim = 1000)
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
sims <- long_err(mu=mu, sd=1, n_samp=ns, nsim = 1000)
table(sims$t)
err <- rbeta(1, 10, 10)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
err
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[1]/table(sims$t)[2]
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/table(sims$t)[1]
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
log(table(sims$t)[2]/table(sims$t)[1])
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
sig_select=0, n_samp=30, nsim=100, seed=666){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
set.seed(seed)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df         <- setNames(as.data.frame(df), c("x", "y", "z", "s"))
replace_p  <- which(abs(df$x/df$s)<abs(qnorm(theoretical_alpha/2)))
replace_p  <- sample(replace_p, nsim*sig_select)
for (i in replace_p) {
repeat {
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2) / length(y))) / sqrt(length(y))
test_stat <- abs(mean(y) / (se * z_adj))
if (test_stat > 1.96) break
}
df[i,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)
plogis(log(table(sims$t)[2]/table(sims$t)[1]))
table(sims$t)[2]
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
sig_select=0, n_samp=30, nsim=100){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df         <- setNames(as.data.frame(df), c("x", "y", "z", "s"))
replace_p  <- which(abs(df$x/df$s)<abs(qnorm(theoretical_alpha/2)))
replace_p  <- sample(replace_p, nsim*sig_select)
for (i in replace_p) {
repeat {
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2) / length(y))) / sqrt(length(y))
test_stat <- abs(mean(y) / (se * z_adj))
if (test_stat > 1.96) break
}
df[i,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
sn_samp=30, nsim=100){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
n_samp=30, nsim=100){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
mu <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=mu, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
theoretical_alpha=0.05
empirical_alpha=0.41
n_samp=30
nsim=100
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
mu=30
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
n_samp=30, nsim=100){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
mu=0
sd=0.25
theoretical_alpha=0.05
empirical_alpha=0.41
n_samp=30
nsim=100
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
View(df)
long_err <- function(mu=0, sd=0.25, theoretical_alpha=0.05, empirical_alpha=0.41,
n_samp=30, nsim=100){
z_adj             <- abs(qnorm(empirical_alpha/2))/abs(qnorm(theoretical_alpha/2))
df <- matrix(ncol=4, nrow=nsim)
for(f in 1:nrow(df)){
y  <- rnorm(n_samp, mu, sd)
se <- (sqrt(sum((y - mean(y))^2)/length(y)))/sqrt(length(y))
df[f,] <- c(mean(y), mean(y)-se*abs(qnorm(theoretical_alpha/2))*z_adj, mean(y)+se*abs(qnorm(theoretical_alpha/2))*z_adj, se*z_adj)
}
df         <- setNames(as.data.frame(df), c("x", "y", "z", "s"))
df$p <- ifelse(df$y < theoretical_alpha  & df$z < theoretical_alpha , "Does not cover unknown true effect-size",
ifelse(df$y > theoretical_alpha  & df$z > theoretical_alpha , "Does not cover unknown true effect-size", "Covers unknown true effect-size"))
df$t <- ifelse(abs(df$x/df$s) > 1.96, "p-value < .05 ('significant')", "p-value > .05 ('non-significant')")
df$b <- paste(df$p, "and", df$t)
return(df)}
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
table(sims$t)[2]/1000
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
sims
sims$t
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
murand <- rcauchy(1, 0, 0.55)
ns <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err <- rbeta(1, 10, 10)
sims <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
table(sims$t)[2]/1000
vec <- rep(NA, 1000)
vec <- rep(NA, 1000)
for(i in 1:length(vec)){
murand <- rcauchy(1, 0, 0.55)
ns     <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err    <- rbeta(1, 10, 10)
sims   <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 1000)
vec[i] <- table(sims$t)[2]/1000}
vec
hist(vec)
vec <- rep(NA, 1000)
for(i in 1:length(vec)){
murand <- rcauchy(1, 0, 0.55)
ns     <- rnbinom(1, mu=30, size=30^2 / (30^2 - 30))
err    <- rbeta(1, 10, 10)
sims   <- long_err(mu=murand, sd=1.5, n_samp=ns, empirical_alpha = err, nsim = 10000)
vec[i] <- table(sims$t)[2]/1000}
hist(vec)
vec
hist(vec/10)
vec/10
ggplot(data=data.frame(f=vec/10), aes(f))+
geom_histogram()
ggplot(data=data.frame(f=vec/10), aes(f))+
geom_histogram(breaks=40, col="black", fill="grey")
ggplot(data=data.frame(f=vec/10), aes(f))+
geom_histogram(breaks=30, col="black", fill="grey")
ggplot(data=data.frame(f=vec/10), aes(f))+
geom_histogram(bins=30, col="black", fill="grey")
ggplot(data=data.frame(f=vec/10), aes(f))+
geom_histogram(bins=40, col="black", fill="grey")
ggplot(data=data.frame(f=vec/10), aes(f))+
geom_histogram(bins=50, col="black", fill="grey")

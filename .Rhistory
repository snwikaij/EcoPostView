model <- function(){
for(i in 1:ni){
y[i]    ~ dgamma(mu[i]^2/sigma^2, mu[i]/sigma^2)
mu[i]   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma ~ dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="gamma_log"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dgamma(mu[i]^2/sigma^2, mu[i]/sigma^2)
log(mu[i])   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma ~ dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="pois_ident"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dpois(mu[i])
mu[i]       <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma <- 1}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="pois_log"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dpois(mu[i])
log(mu[i])  <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma <- 1}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="negbinom_ident"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dnegbin(size/(size+mu[i]), size)
mu[i]       <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
size<- dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "size")
}else if(family=="negbinom_log"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dnegbin(size/(size+mu[i]), size)
log(mu[i])       <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
size<- dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "size")
}else{stop("family not recognized")}
parts <- unlist(strsplit(argument[3], "\\+"))
x     <- as.matrix(data[colnames(data) %in% parts])
y     <- data[,argument[2]]
model_list  <- list(y=y, x=x, ni=nrow(x), nx=ncol(x), prior_mu=prior_mu, prior_mu_se=prior_mu_se)
output <- jags.parallel(data = model_list, model.file = model,
parameters.to.save = return_parameters,
n.iter = 5500,
n.thin = 20,
n.burnin = 500,
n.chains = 10)
summary <- output$BUGSoutput$summary
rownames(summary)[1:c(1+model_list$nx)] <- c("Intercept", parts)
cat("Call:\n")
print(argument.call)
print(summary)
list(summary=summary, JAGS_output=output, data=data)}
results <- glmmJAGS(V3~V2+V1, data=dtest, family = "negbinom_log")
glmmJAGS <- function(formula=NULL, random=NULL, data=NULL, family="norm_ident",
prior_mu=0, prior_mu_se=100){
argument.call <- match.call()
argument      <- gsub(" ", "", formula)
if(is.null(formula)){stop("No formula provided")}
if(is.null(data)){stop("No data provided")}
if(argument[1] != "~"){stop("Not correct formula provided")}
if(length(argument) != 3){stop("Not correct formula provided")}
if(family=="norm_ident"){
model <- function(){
for(i in 1:ni){
y[i]    ~ dnorm(mu[i], tau)
mu[i]   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma ~ dgamma(0.01, 0.01)
tau   <- 1/sigma^2}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="norm_log"){
model <- function(){
for(i in 1:ni){
y[i]    ~ dnorm(mu[i], tau)
log(mu[i])   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma ~ dgamma(0.01, 0.01)
tau   <- 1/sigma^2}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="gamma_identity"){
model <- function(){
for(i in 1:ni){
y[i]    ~ dgamma(mu[i]^2/sigma^2, mu[i]/sigma^2)
mu[i]   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma ~ dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="gamma_log"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dgamma(mu[i]^2/sigma^2, mu[i]/sigma^2)
log(mu[i])   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma ~ dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="pois_ident"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dpois(mu[i])
mu[i]       <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma <- 1}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="pois_log"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dpois(mu[i])
log(mu[i])  <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
sigma <- 1}
return_parameters <- c("b0", "bn", "sigma")
}else if(family=="negbinom_ident"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dnegbin(size/(size+mu[i]), size)
mu[i]       <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
size ~ dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "size")
}else if(family=="negbinom_log"){
model <- function(){
for(i in 1:ni){
y[i]         ~ dnegbin(size/(size+mu[i]), size)
log(mu[i])   <- b0+inprod(bn[],x[i,])}
b0 ~ dnorm(prior_mu, prior_mu_se)
for(j in 1:nx){bn[j] ~ dnorm(prior_mu, 1/prior_mu_se^2)}
size ~ dgamma(0.01, 0.01)}
return_parameters <- c("b0", "bn", "size")
}else{stop("family not recognized")}
parts <- unlist(strsplit(argument[3], "\\+"))
x     <- as.matrix(data[colnames(data) %in% parts])
y     <- data[,argument[2]]
model_list  <- list(y=y, x=x, ni=nrow(x), nx=ncol(x), prior_mu=prior_mu, prior_mu_se=prior_mu_se)
output <- jags.parallel(data = model_list, model.file = model,
parameters.to.save = return_parameters,
n.iter = 5500,
n.thin = 20,
n.burnin = 500,
n.chains = 10)
summary <- output$BUGSoutput$summary
rownames(summary)[1:c(1+model_list$nx)] <- c("Intercept", parts)
cat("Call:\n")
print(argument.call)
print(summary)
list(summary=summary, JAGS_output=output, data=data)}
results <- glmmJAGS(V3~V2+V1, data=dtest, family = "negbinom_log")
install.packages("bookdown")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("EcoPostView.Rmd", "bookdown::gitbook")
library(bookdown)
bookdown::render_book("EcoPostView.Rmd", "bookdown::gitbook")
bookdown::render_book("EcoPostView.RMD")
bookdown::render_book("EcoPostView.Rmd")
bookdown::render_book("EcoPostView.Rmd")
wd()
wd()
getwd()
bookdown::render_book("C:/Users/admin/OneDrive/Bureaublad/EcoPostView/docs/EcoPostView.Rmd")
bookdown::create_book("EcoPostView")
library(readxl)
library(vegan)
library(ggplot2)
library(plyr)
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
com.mat     <- read_xlsx(destfile, 2)
env.mat     <- read_xlsx(destfile, 3)
#run cca
my.cca <- vegan::cca(com.mat ~ ., data=env.mat, na.action=na.omit)
#total unconstrained variance
rsqcca <- RsquareAdj(my.cca)
labcca <- paste0("R-squared=", round(rsqcca$r.squared,3))
#summary
sumcca <- summary(my.cca)
#explanation by axis
CCA1         <- paste("Axis 1", paste0(paste0("(", paste0(round(as.data.frame(sumcca$cont$importance)[2,1]*100, 1), "%")), ")"))
CCA2         <- paste("Axis 2", paste0(paste0("(", paste0(round(as.data.frame(sumcca$cont$importance)[2,2]*100, 1), "%")), ")"))
#colours for arrows
vectornames <- as.data.frame(sumcca$biplot)
rownames(vectornames) <- plyr::mapvalues(rownames(vectornames), from=c("`P (S)`", "`P (P)`"), to=c("`TP (S)`", "`TP (P)`"))
colornames  <- plyr::mapvalues(rownames(vectornames),
from=c("Velocity", "Depth",
"pH", "HCO3",
"`TP (S)`", "`TP (P)`",
"`NH4 (S)`",  "`NH4 (P)`",
"`NO3 (S)`", "`NO3 (P)`",
"`Spatial distance`", "`Distance to source`"),
to=c("blue", "blue",
"green", "green",
"green", "brown",
"green", "brown",
"green", "brown",
"orange", "orange"))
#move species names for beter visibility
speciespoints <- as.data.frame(sumcca$species)
speciespoints$CCA2[4] <- speciespoints$CCA2[4]-0.15
speciespoints$CCA2[8] <- speciespoints$CCA2[8]+0.05
speciespoints$CCA2[10] <- speciespoints$CCA2[10]+0.05
speciespoints$CCA2[13] <- speciespoints$CCA2[13]-0.05
#vectors
vectors  <- as.data.frame(sumcca$biplot)
vecnames <- vectors
vecnames$CCA1[5] <- vecnames$CCA1[5]+0.3
vecnames$CCA1[6] <- vecnames$CCA1[6]+0.3
vecnames$CCA1[12] <- vecnames$CCA1[12]+0.3
vecnames$CCA2[5] <- vecnames$CCA2[5]+0.04
vecnames$CCA2[6] <- vecnames$CCA2[6]+0.04
vecnames$CCA2[12] <- vecnames$CCA2[12]+0.04
#vector names
vnames <- plyr::mapvalues(rownames(vecnames), from=c("`P (S)`", "`P (P)`"), to=c("`TP (S)`", "`TP (P)`"))
#plot results
ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=3, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=3, label=rownames(speciespoints), col="grey30")+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
sum(com.mat>0)
colSums(com.mat>0)
#Sample size per taxon
n.taxon <- colSums(com.mat>0)
#Sample size per taxon
n.taxon <- data.frame(n=colSums(com.mat>0))
n.taxon
n.taxon$text <- ifelse(n.taxon$n>5, "bold", "normal")
#plot results
ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=3, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=3, label=rownames(speciespoints), col=n.taxon$text)+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
#Sample size per taxon
n.taxon      <- data.frame(n=colSums(com.mat>0))
n.taxon$text <- ifelse(n.taxon$n>5, "bold", "plain")
#plot results
ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=3, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=n.taxon$text, label=rownames(speciespoints), col="grey30")+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
#Sample size per taxon
n.taxon      <- data.frame(n=colSums(com.mat>0))
n.taxon$text <- ifelse(n.taxon$n>=5, "bold", "plain")
n.taxon$text <- ifelse(n.taxon$n>=5, 4, 3)
#run cca
my.cca <- vegan::cca(com.mat ~ ., data=env.mat, na.action=na.omit)
#total unconstrained variance
rsqcca <- RsquareAdj(my.cca)
labcca <- paste0("R-squared=", round(rsqcca$r.squared,3))
#summary
sumcca <- summary(my.cca)
#explanation by axis
CCA1         <- paste("Axis 1", paste0(paste0("(", paste0(round(as.data.frame(sumcca$cont$importance)[2,1]*100, 1), "%")), ")"))
CCA2         <- paste("Axis 2", paste0(paste0("(", paste0(round(as.data.frame(sumcca$cont$importance)[2,2]*100, 1), "%")), ")"))
#colours for arrows
vectornames <- as.data.frame(sumcca$biplot)
rownames(vectornames) <- plyr::mapvalues(rownames(vectornames), from=c("`P (S)`", "`P (P)`"), to=c("`TP (S)`", "`TP (P)`"))
colornames  <- plyr::mapvalues(rownames(vectornames),
from=c("Velocity", "Depth",
"pH", "HCO3",
"`TP (S)`", "`TP (P)`",
"`NH4 (S)`",  "`NH4 (P)`",
"`NO3 (S)`", "`NO3 (P)`",
"`Spatial distance`", "`Distance to source`"),
to=c("blue", "blue",
"green", "green",
"green", "brown",
"green", "brown",
"green", "brown",
"orange", "orange"))
#move species names for beter visibility
speciespoints <- as.data.frame(sumcca$species)
speciespoints$CCA2[4] <- speciespoints$CCA2[4]-0.15
speciespoints$CCA2[8] <- speciespoints$CCA2[8]+0.05
speciespoints$CCA2[10] <- speciespoints$CCA2[10]+0.05
speciespoints$CCA2[13] <- speciespoints$CCA2[13]-0.05
#vectors
vectors  <- as.data.frame(sumcca$biplot)
vecnames <- vectors
vecnames$CCA1[5] <- vecnames$CCA1[5]+0.3
vecnames$CCA1[6] <- vecnames$CCA1[6]+0.3
vecnames$CCA1[12] <- vecnames$CCA1[12]+0.3
vecnames$CCA2[5] <- vecnames$CCA2[5]+0.04
vecnames$CCA2[6] <- vecnames$CCA2[6]+0.04
vecnames$CCA2[12] <- vecnames$CCA2[12]+0.04
#vector names
vnames <- plyr::mapvalues(rownames(vecnames), from=c("`P (S)`", "`P (P)`"), to=c("`TP (S)`", "`TP (P)`"))
#plot results
ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=3, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=n.taxon$text, label=rownames(speciespoints), col="grey30")+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
com.mat     <- read_xlsx(destfile, 2)
env.mat     <- read_xlsx(destfile, 3)
#Sample size per taxon
n.taxon      <- data.frame(n=colSums(com.mat>0))
n.taxon$text <- ifelse(n.taxon$n>=5, "bold", "plain")
n.taxon$size <- ifelse(n.taxon$n>=5, 4, 3)
#run cca
my.cca <- vegan::cca(com.mat ~ ., data=env.mat, na.action=na.omit)
#total unconstrained variance
rsqcca <- RsquareAdj(my.cca)
labcca <- paste0("R-squared=", round(rsqcca$r.squared,3))
#summary
sumcca <- summary(my.cca)
#explanation by axis
CCA1         <- paste("Axis 1", paste0(paste0("(", paste0(round(as.data.frame(sumcca$cont$importance)[2,1]*100, 1), "%")), ")"))
CCA2         <- paste("Axis 2", paste0(paste0("(", paste0(round(as.data.frame(sumcca$cont$importance)[2,2]*100, 1), "%")), ")"))
#colours for arrows
vectornames <- as.data.frame(sumcca$biplot)
rownames(vectornames) <- plyr::mapvalues(rownames(vectornames), from=c("`P (S)`", "`P (P)`"), to=c("`TP (S)`", "`TP (P)`"))
colornames  <- plyr::mapvalues(rownames(vectornames),
from=c("Velocity", "Depth",
"pH", "HCO3",
"`TP (S)`", "`TP (P)`",
"`NH4 (S)`",  "`NH4 (P)`",
"`NO3 (S)`", "`NO3 (P)`",
"`Spatial distance`", "`Distance to source`"),
to=c("blue", "blue",
"green", "green",
"green", "brown",
"green", "brown",
"green", "brown",
"orange", "orange"))
#move species names for beter visibility
speciespoints <- as.data.frame(sumcca$species)
speciespoints$CCA2[4] <- speciespoints$CCA2[4]-0.15
speciespoints$CCA2[8] <- speciespoints$CCA2[8]+0.05
speciespoints$CCA2[10] <- speciespoints$CCA2[10]+0.05
speciespoints$CCA2[13] <- speciespoints$CCA2[13]-0.05
#vectors
vectors  <- as.data.frame(sumcca$biplot)
vecnames <- vectors
vecnames$CCA1[5] <- vecnames$CCA1[5]+0.3
vecnames$CCA1[6] <- vecnames$CCA1[6]+0.3
vecnames$CCA1[12] <- vecnames$CCA1[12]+0.3
vecnames$CCA2[5] <- vecnames$CCA2[5]+0.04
vecnames$CCA2[6] <- vecnames$CCA2[6]+0.04
vecnames$CCA2[12] <- vecnames$CCA2[12]+0.04
#vector names
vnames <- plyr::mapvalues(rownames(vecnames), from=c("`P (S)`", "`P (P)`"), to=c("`TP (S)`", "`TP (P)`"))
#plot results
ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=3, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=n.taxon$text, label=rownames(speciespoints), col="grey30")+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
#plot results
ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=n.taxon$size, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=n.taxon$text, label=rownames(speciespoints), col="grey30")+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
#plot results
pl3 <- ggplot(speciespoints, aes(CCA1, CCA2))+xlab(CCA1)+ylab(CCA2)+
geom_vline(xintercept = 0, lty=2)+geom_hline(yintercept = 0, lty=2)+
geom_segment(data=vectors, aes(x = 0, y = 0, xend = CCA1*2, yend = CCA2*2),
col=colornames, lwd=0.6, alpha = 0.7,
arrow = arrow(length = unit(0.35, "cm")))+
annotate("text", x=ifelse(vecnames$CCA1 > 0, vecnames$CCA1*2+0.15, vecnames$CCA1*2-0.15),
y=ifelse(vecnames$CCA2 > 0, vecnames$CCA2*2+0.3, vecnames$CCA2*2-0.3),
label=vnames, col=colornames, size=3, alpha = 0.7)+
annotate("text", size=n.taxon$size, x=speciespoints$CCA1, y=speciespoints$CCA2,
fontface=n.taxon$text, label=rownames(speciespoints), col="grey30")+
xlim(-1.8,2)+
theme_classic()+
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=.8),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
ggsave(pl3, filename = "C:/Users/admin/OneDrive/Bureaublad/TP_niche/Fig3.tiff",
width = 155, height = 100, units = "mm", dpi=600)

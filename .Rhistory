fit
start.time <- Sys.time()
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 20,
n.iter = 2000,
n.burnin = 1000)
mlsdm <- function(){
#Likelihood
for (i in 1:N) {
y[i] ~ dbern(eta[i])
logit(eta[i]) <- b0[Taxon[i]] + inprod(b1[Taxon[i],], x[i,])
}
# Priors for parameters
for (t in 1:NTaxa) {
b0[t] ~ dnorm(0, 1/0.5^2)
for (j in 1:IV) {
b1[t,j] ~ dnorm(0, 1/0.5^2)
}
}
# Stochastic model for missing values in x
for (i in 1:N) {
for (j in 1:IV) {
x[i,j] ~ dnorm(mu_x, tau_x)
}
}
# Priors for missing data model
mu_x ~ dnorm(0, 1/10^2)
sigma_x ~ dunif(0, 10)
tau_x <- 1 / pow(sigma_x, 2)
}
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (P)`))
species_dfs <- list()
for (i in names(table(df$Species))[table(df$Species)>1]) {
# Subset the dataframe for each species
taxon_data <- df[df$Species == i,]
# Create a new dataframe with all unique sites
result <- data.frame(ID = unique(df$ID), Taxon=i)
# Add presence (1) or absence (0) for each site
result$presence <- ifelse(result$ID %in% taxon_data$ID, 1, 0)
result <- merge(result, df[-2], by="ID")
# Store the result in the list
species_dfs[[i]] <- result
}
joint_df <- do.call(rbind, species_dfs)
rownames(joint_df) <- NULL
# Prepare data list for JAGS
data <- list(
N = nrow(joint_df),
y = joint_df$presence,
x = joint_df[-c(1:3)],
Taxon = as.factor(joint_df$Taxon),
IV = ncol(joint_df[-c(1:3)]),
NTaxa = length(unique(joint_df$Taxon)))
start.time <- Sys.time()
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 20,
n.iter = 2000,
n.burnin = 1000)
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 25,
n.thin = 3,
n.iter = 3000,
n.burnin = 1000)
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (P)`))
View(df)
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`))
species_dfs <- list()
View(df)
is.infinite(df$NO3)
df$NO3[is.infinite(df$NO3)] <- NA
View(df)
species_dfs <- list()
for (i in names(table(df$Species))[table(df$Species)>1]) {
# Subset the dataframe for each species
taxon_data <- df[df$Species == i,]
# Create a new dataframe with all unique sites
result <- data.frame(ID = unique(df$ID), Taxon=i)
# Add presence (1) or absence (0) for each site
result$presence <- ifelse(result$ID %in% taxon_data$ID, 1, 0)
result <- merge(result, df[-2], by="ID")
# Store the result in the list
species_dfs[[i]] <- result
}
joint_df <- do.call(rbind, species_dfs)
rownames(joint_df) <- NULL
View(joint_df)
# Prepare data list for JAGS
data <- list(
N = nrow(joint_df),
y = joint_df$presence,
x = joint_df[-c(1:3)],
Taxon = as.factor(joint_df$Taxon),
IV = ncol(joint_df[-c(1:3)]),
NTaxa = length(unique(joint_df$Taxon)))
start.time <- Sys.time()
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 25,
n.thin = 3,
n.iter = 3000,
n.burnin = 1000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
fit
mlsdm <- function(){
#Likelihood
for (i in 1:N) {
y[i] ~ dbern(eta[i])
logit(eta[i]) <- b0[Taxon[i]] + inprod(b1[Taxon[i],], x[i,])
}
# Priors for parameters
for (t in 1:NTaxa) {
b0[t] ~ dnorm(0, 1/10^2)
for (j in 1:IV) {
b1[t,j] ~ dnorm(0, 1/0.5^2)
}
}
# Stochastic model for missing values in x
for (i in 1:N) {
for (j in 1:IV) {
x[i,j] ~ dnorm(mu_x, tau_x)
}
}
# Priors for missing data model
mu_x ~ dnorm(0, 1/10^2)
sigma_x ~ dunif(0, 10)
tau_x <- 1 / pow(sigma_x, 2)
}
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`))
df$NO3[is.infinite(df$NO3)] <- NA
species_dfs <- list()
for (i in names(table(df$Species))[table(df$Species)>1]) {
# Subset the dataframe for each species
taxon_data <- df[df$Species == i,]
# Create a new dataframe with all unique sites
result <- data.frame(ID = unique(df$ID), Taxon=i)
# Add presence (1) or absence (0) for each site
result$presence <- ifelse(result$ID %in% taxon_data$ID, 1, 0)
result <- merge(result, df[-2], by="ID")
# Store the result in the list
species_dfs[[i]] <- result
}
joint_df <- do.call(rbind, species_dfs)
rownames(joint_df) <- NULL
# Prepare data list for JAGS
data <- list(
N = nrow(joint_df),
y = joint_df$presence,
x = joint_df[-c(1:3)],
Taxon = as.factor(joint_df$Taxon),
IV = ncol(joint_df[-c(1:3)]),
NTaxa = length(unique(joint_df$Taxon)))
start.time <- Sys.time()
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 25,
n.thin = 3,
n.iter = 3000,
n.burnin = 1000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
fit
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`),
Vel=log(full.mat$Velocity))
View(df)
url         <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Aquatic_Botany_Kaijser_et_al._2019.csv"), header = T)
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
full.mat2        <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Aquatic_Botany_Kaijser_et_al._2019.csv"), header = T)
View(full.mat2)
full.mat2        <- read.csv(url("https://github.com/snwikaij/Data/blob/main/PLOS_One_Kaijser_et_al._2022.csv"), header = T)
View(full.mat2)
full.mat2        <- read.csv(url("https://github.com/snwikaij/Data/blob/main/PLOS_One_Kaijser_et_al._2022.csv"), sep=",", header = T)
full.mat2        <- read.csv(url("https://github.com/snwikaij/Data/blob/main/PLOS_One_Kaijser_et_al._2022.csv"), sep=";", header = T)
full.mat2    <- read.csv(url("https://github.com/snwikaij/Data/blob/main/PLOS_One_Kaijser_et_al._2022.csv"), header = T)
View(full.mat2)
full.mat2 <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Hydrobiologia_Kaijser_et_al._2022.csv"), header = T)
View(full.mat2)
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df1 <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`),
Vel=log(full.mat$Velocity))
full.mat2$NNO3
full.mat2$NNO3/14*62
df1 <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`),
Vel=log(full.mat$Velocity))
full.mat2 <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Hydrobiologia_Kaijser_et_al._2022.csv"), header = T)
df2 <- data.frame(ID=full.mat2$ID,
Species=full.mat2$Species,
EC=log(full.mat2$EC),
HCO3=log(full.mat2$HCO3),
TP=log(full.mat2$PPO4/0.75),
NO3=log(full.mat2$NNO3/14*62),
Vel=log(full.mat$Velocity))
df2 <- data.frame(ID=full.mat2$ID,
Species=full.mat2$Species,
EC=log(full.mat2$EC),
HCO3=log(full.mat2$HCO3),
TP=log(full.mat2$PPO4/0.75),
NO3=log(full.mat2$NNO3/14*62))
View(df2)
na.omit(df2)
df2 <- na.omit(df2)
df2$Vel <- NA
View(df1)
View(df2)
View(df1)
mlsdm <- function(){
#Likelihood
for (i in 1:N) {
y[i] ~ dbern(eta[i])
logit(eta[i]) <- b0[Taxon[i]] + inprod(b1[Taxon[i],], x[i,])
}
# Priors for parameters
for (t in 1:NTaxa) {
b0[t] ~ dnorm(0, 1/10^2)
for (j in 1:IV) {
b1[t,j] ~ dnorm(0, 1/0.5^2)
}
}
# Stochastic model for missing values in x
for (i in 1:N) {
for (j in 1:IV) {
x[i,j] ~ dnorm(mu_x, tau_x)
}
}
# Priors for missing data model
mu_x ~ dnorm(0, 1/10^2)
sigma_x ~ dunif(0, 10)
tau_x <- 1 / pow(sigma_x, 2)
}
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df1 <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`),
Vel=log(full.mat$Velocity))
df$NO3[is.infinite(df$NO3)] <- NA
df$Vel[is.infinite(df$Vel)] <- NA
full.mat2 <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Hydrobiologia_Kaijser_et_al._2022.csv"), header = T)
df2 <- data.frame(ID=full.mat2$ID,
Species=full.mat2$Species,
EC=log(full.mat2$EC),
HCO3=log(full.mat2$HCO3),
TP=log(full.mat2$PPO4/0.75),
NO3=log(full.mat2$NNO3/14*62))
df2     <- na.omit(df2)
df2$Vel <- NA
species_dfs <- list()
for (i in names(table(df$Species))[table(df$Species)>1]) {
# Subset the dataframe for each species
taxon_data <- df[df$Species == i,]
# Create a new dataframe with all unique sites
result <- data.frame(ID = unique(df$ID), Taxon=i)
# Add presence (1) or absence (0) for each site
result$presence <- ifelse(result$ID %in% taxon_data$ID, 1, 0)
result <- merge(result, df[-2], by="ID")
# Store the result in the list
species_dfs[[i]] <- result
}
mlsdm <- function(){
#Likelihood
for (i in 1:N) {
y[i] ~ dbern(eta[i])
logit(eta[i]) <- b0[Taxon[i]] + inprod(b1[Taxon[i],], x[i,])
}
# Priors for parameters
for (t in 1:NTaxa) {
b0[t] ~ dnorm(0, 1/10^2)
for (j in 1:IV) {
b1[t,j] ~ dnorm(0, 1/0.5^2)
}
}
# Stochastic model for missing values in x
for (i in 1:N) {
for (j in 1:IV) {
x[i,j] ~ dnorm(mu_x, tau_x)
}
}
# Priors for missing data model
mu_x ~ dnorm(0, 1/10^2)
sigma_x ~ dunif(0, 10)
tau_x <- 1 / pow(sigma_x, 2)
}
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df1 <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`),
Vel=log(full.mat$Velocity))
df1$NO3[is.infinite(df$NO3)] <- NA
df1$Vel[is.infinite(df$Vel)] <- NA
full.mat2 <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Hydrobiologia_Kaijser_et_al._2022.csv"), header = T)
df2 <- data.frame(ID=full.mat2$ID,
Species=full.mat2$Species,
EC=log(full.mat2$EC),
HCO3=log(full.mat2$HCO3),
TP=log(full.mat2$PPO4/0.75),
NO3=log(full.mat2$NNO3/14*62))
df2     <- na.omit(df2)
df2$Vel <- NA
cbind(df1, df2)
rbind(df1, df2)
df      <- rbind(df1, df2)
species_dfs <- list()
for (i in names(table(df$Species))[table(df$Species)>10]) {
# Subset the dataframe for each species
taxon_data <- df[df$Species == i,]
# Create a new dataframe with all unique sites
result <- data.frame(ID = unique(df$ID), Taxon=i)
# Add presence (1) or absence (0) for each site
result$presence <- ifelse(result$ID %in% taxon_data$ID, 1, 0)
result <- merge(result, df[-2], by="ID")
# Store the result in the list
species_dfs[[i]] <- result
}
joint_df <- do.call(rbind, species_dfs)
rownames(joint_df) <- NULL
View(joint_df)
mlsdm <- function(){
#Likelihood
for (i in 1:N) {
y[i] ~ dbern(eta[i])
logit(eta[i]) <- b0[Taxon[i]] + inprod(b1[Taxon[i],], x[i,])
}
# Priors for parameters
for (t in 1:NTaxa) {
b0[t] ~ dnorm(0, 1/10^2)
for (j in 1:IV) {
b1[t,j] ~ dnorm(0, 1/0.5^2)
}
}
# Stochastic model for missing values in x
for (i in 1:N) {
for (j in 1:IV) {
x[i,j] ~ dnorm(mu_x, tau_x)
}
}
# Priors for missing data model
mu_x ~ dnorm(0, 1/10^2)
sigma_x ~ dunif(0, 10)
tau_x <- 1 / pow(sigma_x, 2)
}
#download the data
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
full.mat     <- read_xlsx(destfile, 1)
df1 <- data.frame(ID=full.mat$Location,
Species=full.mat$Species,
EC=log(full.mat$Cond),
HCO3=log(full.mat$HCO3),
TP=log(full.mat$`P (S)`),
NO3=log(full.mat$`NO3 (S)`),
Vel=log(full.mat$Velocity))
df1$NO3[is.infinite(df1$NO3)] <- NA
df1$Vel[is.infinite(df1$Vel)] <- NA
full.mat2 <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/main/Hydrobiologia_Kaijser_et_al._2022.csv"), header = T)
df2 <- data.frame(ID=full.mat2$ID,
Species=full.mat2$Species,
EC=log(full.mat2$EC),
HCO3=log(full.mat2$HCO3),
TP=log(full.mat2$PPO4/0.75),
NO3=log(full.mat2$NNO3/14*62))
df2     <- na.omit(df2)
df2$Vel <- NA
df      <- rbind(df1, df2)
species_dfs <- list()
for (i in names(table(df$Species))[table(df$Species)>10]) {
# Subset the dataframe for each species
taxon_data <- df[df$Species == i,]
# Create a new dataframe with all unique sites
result <- data.frame(ID = unique(df$ID), Taxon=i)
# Add presence (1) or absence (0) for each site
result$presence <- ifelse(result$ID %in% taxon_data$ID, 1, 0)
result <- merge(result, df[-2], by="ID")
# Store the result in the list
species_dfs[[i]] <- result
}
joint_df <- do.call(rbind, species_dfs)
rownames(joint_df) <- NULL
View(joint_df)
# Prepare data list for JAGS
data <- list(
N = nrow(joint_df),
y = joint_df$presence,
x = joint_df[-c(1:3)],
Taxon = as.factor(joint_df$Taxon),
IV = ncol(joint_df[-c(1:3)]),
NTaxa = length(unique(joint_df$Taxon)))
start.time <- Sys.time()
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 25,
n.thin = 3,
n.iter = 3000,
n.burnin = 1000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
14000/5
14000/200
fit
mcmcplots::denplot(fit, parms = "b1")
mcmcplots::denplot(fit, parms = "b1")
start.time <- Sys.time()
fit <- jags.parallel(data = data,
parameters.to.save = c("b0", "b1"),
model.file = mlsdm,
n.chains = 28,
n.thin = 10,
n.iter = 3000,
n.burnin = 1000)
nrow(df)
#200=5 min
#14000=25
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
fit
mcmcplots::denplot(fit, parms = "b1")
nrow(df)
nrow(df)

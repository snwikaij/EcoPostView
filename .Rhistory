b0    <- 3
b1    <- -0.02
y     <- rpois(length(temp), exp(b0+b1*temp))
pval[i] <- summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4]}
hist(pval)
n <- seq(nmin, nmax, nstep)
nmin=5
nmax=200
nstep=5
n <- seq(nmin, nmax, nstep)
n
n        <- seq(nmin, nmax, nstep)
err_list <- list()
n        <- seq(nmin, nmax, nstep)
err_list <- list()
pval     <- as.numeric()
b0=3
b1=-0,02
b0=3
b1=-0.02
pval     <- array(NA, dim=c(nsim, 2, 3))
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=1000){
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=1000){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
print(i)
temp  <- seq(15, 35, length.out=n)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
return(err_list)
}
yep <- glm_samp
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=1000){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
print(j)
for(j in n){
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
print(i)
temp  <- seq(15, 35, length.out=n)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
return(err_list)
}
yep <- glm_samp
n        <- seq(nmin, nmax, nstep)
err_list <- list()
print(j)
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=1000){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
print(i)
temp  <- seq(15, 35, length.out=n)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
return(err_list)
}
yep <- glm_samp
yep
b0=3
b1=-0.02
minx=15
maxx=35
nmin=5
nmax=200
nstep=5
nsim=1000
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
print(i)
temp  <- seq(15, 35, length.out=n)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
print(i)
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4]
data.frame(x=temp, y=y)
i
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=1000){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
print(i)
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
return(err_list)
}
yep <- glm_samp
yep
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
print(i)
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
nsim=100
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[j] <- pval
}
pval
c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])
err_list[j] <- pval
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=100){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
return(err_list)
}
yep <- glm_samp
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=100){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
return(err_list)
}
yep <- glm_samp
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
b0=3
b1=-0.02
minx=15
maxx=35
nmin=5
nmax=200
nstep=5
nsim=100
nsim=100
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
temp  <- seq(15, 35, length.out=i)
y        <- rpois(length(temp), exp(b0+b1*temp))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=temp, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
do.call(rbind.data.frame, err_list)
total <- do.call(rbind.data.frame, err_list)
aggregate(data=total, V2~V1, function(x) sum(x<.05, na.rm = T))
View(total)
plot(total$V1, total$V2)
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
x        <- seq(15, 35, length.out=i)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
err_list
total <- do.call(rbind.data.frame, err_list)
View(total)
na.omit(total)
na.omit(total)
total <- do.call(rbind.data.frame, err_list)
total <- na.omit(total)
aggregate(data=total, V2~V1, function(x) sum(x<.05, na.rm = T))
nsim=300
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
x        <- seq(15, 35, length.out=i)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4])}
err_list[[j]] <- pval
}
do.call(rbind.data.frame, err_list)
tot <- do.call(rbind.data.frame, err_list)
na.omit(tot)
n        <- seq(nmin, nmax, nstep)
err_list <- list()
alpha=0.05
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 3:nsim){
x        <- seq(15, 35, length.out=i)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, ifelse(summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4]<alpha,1,0))
}
err_list[[j]] <- pval
}
tot <- do.call(rbind.data.frame, err_list)
tot <- na.omit(tot)
aggregate(data=tot, V2~V1, function(x), sum(x,na.rm = T))
aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
n        <- seq(nmin, nmax, nstep)
err_list <- list()
print(j)
pval     <- array(NA, dim=c(nsim, 2))
pval
x        <- seq(15, 35, length.out=j)
x
y        <- rpois(length(x), exp(b0+b1*x))
y
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
x        <- seq(15, 35, length.out=j)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, ifelse(summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4]<alpha,1,0))
}
err_list[[j]] <- pval
}
tot <- do.call(rbind.data.frame, err_list)
tot <- na.omit(tot)
aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
power <- aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
plot(power$V1, power$V2)
plot(power$V1, power$V2, type="l")
power$V2/nsim
power    <- aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
power$V2 <- power$V2/nsim
plot(power$V1, power$V2, type="l")
power$V2<.8
[power$V2>0.8]
power$V2[power$V2>0.8]
power$V2[power$V2>0.8][1]
power$V2[power$V2>0.8]
power$V1[power$V2>0.8]
power$V1[power$V2>0.8][1]
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=1, nsim=300, alpha=0.05){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
x        <- seq(15, 35, length.out=j)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, ifelse(summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4]<alpha,1,0))
}
err_list[[j]] <- pval
}
tot <- do.call(rbind.data.frame, err_list)
tot <- na.omit(tot)
power    <- aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
power$V2 <- power$V2/nsim
return(power)}
yep <- glm_samp()
plot(yep$V1, yep$V2)
power$V1[power$V2>=0.8][1]
plot(yep$V1, yep$V2, type="l")
abline(v=power$V1[power$V2>=0.8][1], col="red", lty=2)
tot <- do.call(rbind.data.frame, err_list)
tot <- na.omit(tot)
power_df    <- aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
power_df$V2 <- power_df$V2/nsim
plot(power_df$V1, power_df$V2, type="l")
abline(v=power_df$V1[power_df$V2>=power][1], col="red", lty=2)
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=1, nsim=300, alpha=0.05, power=0.8){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
x        <- seq(15, 35, length.out=j)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, ifelse(summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4]<alpha,1,0))
}
err_list[[j]] <- pval
}
tot <- do.call(rbind.data.frame, err_list)
tot <- na.omit(tot)
power_df    <- aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
power_df$V2 <- power_df$V2/nsim
plot(power_df$V1, power_df$V2, type="l")
abline(v=power_df$V1[power_df$V2>=power][1], col="red", lty=2)
abline(h=power, col="red", lty=2)
return(power_df)}
yep <- glm_samp()
yep <- glm_samp(nstep=5)
glm_samp <- function(b0=3, b1=-0.02, minx=15, maxx=35, nmin=5, nmax=200, nstep=5, nsim=500, alpha=0.05, power=0.8){
n        <- seq(nmin, nmax, nstep)
err_list <- list()
for(j in n){
print(j)
pval     <- array(NA, dim=c(nsim, 2))
for(i in 1:nsim){
x        <- seq(15, 35, length.out=j)
y        <- rpois(length(x), exp(b0+b1*x))
pval[i,] <- c(j, ifelse(summary(mod <- glm(y~x, data=data.frame(x=x, y=y)))$coef[2,4]<alpha,1,0))
}
err_list[[j]] <- pval
}
tot <- do.call(rbind.data.frame, err_list)
tot <- na.omit(tot)
power_df    <- aggregate(data=tot, V2~V1, function(x) sum(x,na.rm = T))
power_df$V2 <- power_df$V2/nsim
plot(power_df$V1, power_df$V2, type="l", xlab="Sample size", ylab="Power = (1-beta)")
abline(v=power_df$V1[power_df$V2>=power][1], col="red", lty=2)
abline(h=power, col="red", lty=2)
return(power_df)}
yep <- glm_samp(nstep=5)
install.packages("simr")
library(readxl)
library(ggplot2)
library(parallel)
library(usethis)
library(mime)
library(devtools)
library(gridExtra)
library(grid)
#Detect number of cores
numberofcores <- parallel::detectCores()
#Upload the data (literature) and priors
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025_Supplementary_Information_2.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
literature  <- read_xlsx(destfile, 1)
priors      <- read_xlsx(destfile, 3)
#Total number of articles
nrow(litres2 <- literature[!duplicated(literature$DOI),])
#Systematic and non-systematic
table(literature$sys[!duplicated(literature$DOI)])
#Total number of models
nrow(litres1 <- literature[literature$Parameter == "b0",])
#Log and logit-linear models
table(literature$Link[literature$Parameter == "b0"])
#Total log and logit-linear model parameters
table(literature$Link[literature$Parameter == "b1"])
#Create dataset for the model
mod_data <- data.frame(group=literature$Response,
predictor=literature$Fignames,
level=paste(literature$Parameter, literature$Type, literature$Link, literature$Response, sep = "_"),
estimate=literature$estimate,
stderr=literature$estimate_se,
linkfun=literature$Link)
#Full model
mod <- meta(estimate = mod_data$estimate,
stderr = mod_data$stderr,
parameter = do.call(rbind, strsplit(mod_data$level, "_"))[,1],
predictor = mod_data$predictor,
link_function = mod_data$linkfun,
grouping = mod_data$group,
prior_mu = as.data.frame(priors[c(2,4,6,8)]),
prior_mu_se = as.data.frame(priors[c(3,5,7,9)]),
prior_study_var = 5,
n_iter = 30000,
n_thin = 30,
n_chain= numberofcores)
library(EcoPostView)
#Full model
mod <- meta(estimate = mod_data$estimate,
stderr = mod_data$stderr,
parameter = do.call(rbind, strsplit(mod_data$level, "_"))[,1],
predictor = mod_data$predictor,
link_function = mod_data$linkfun,
grouping = mod_data$group,
prior_mu = as.data.frame(priors[c(2,4,6,8)]),
prior_mu_se = as.data.frame(priors[c(3,5,7,9)]),
prior_study_var = 5,
n_iter = 30000,
n_thin = 30,
n_chain= numberofcores)
mod$Summary
source("~/.active-rstudio-document", echo=TRUE)
aggregate(data=mod$Chains_mu, estimate~parameter+link+group, mean)
aggregate(data=mod$Chains_mu, estimate~parameter+link+group, sd)
library(readxl)
library(ggplot2)
library(parallel)
library(usethis)
library(mime)
library(devtools)
library(gridExtra)
library(grid)
library(EcoPostView)
#JAGS needs to be installed from https://sourceforge.net/projects/mcmc-jags/
library(R2jags)
#Detect number of cores
numberofcores <- parallel::detectCores()
#Upload the data (literature) and priors
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025_Supplementary_Information_2.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
literature  <- read_xlsx(destfile, 1)
priors      <- read_xlsx(destfile, 3)
#Total number of articles
nrow(litres2 <- literature[!duplicated(literature$DOI),])
#Systematic and non-systematic
table(literature$sys[!duplicated(literature$DOI)])
#Total number of models
nrow(litres1 <- literature[literature$Parameter == "b0",])
#Log and logit-linear models
table(literature$Link[literature$Parameter == "b0"])
#Total log and logit-linear model parameters
table(literature$Link[literature$Parameter == "b1"])
#Create dataset for the model
mod_data <- data.frame(group=literature$Response,
predictor=literature$Fignames,
level=paste(literature$Parameter, literature$Type, literature$Link, literature$Response, sep = "_"),
estimate=literature$estimate,
stderr=literature$estimate_se,
linkfun=literature$Link)
#Full model
mod <- meta(estimate = mod_data$estimate,
stderr = mod_data$stderr,
parameter = do.call(rbind, strsplit(mod_data$level, "_"))[,1],
predictor = mod_data$predictor,
link_function = mod_data$linkfun,
grouping = mod_data$group,
prior_mu = as.data.frame(priors[c(2,4,6,8)]),
prior_mu_se = as.data.frame(priors[c(3,5,7,9)]),
prior_study_var = 5,
n_iter = 30000,
n_thin = 30,
n_chain= numberofcores)
aggregate(data=mod$Chains_mu, estimate~parameter+link+group, sd)
aggregate(data=mod$Chains_mu, estimate~parameter+link+group, mean)
aggregate(data=mod$Chains_mu, estimate~parameter+link+group, sd)

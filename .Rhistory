operators
pattern_p <- "(?i)p\\s*[=<>]\\s*\\.?\\d+\\.?\\d*"
pattern_o <- "(?i)p\\s*([<>=]=?|==)\\s*\\.?\\d+\\.?\\d*"
extr_p <- str_extract_all(combined_abstracts$clean_abstract, pattern_o)
pv_ext <- unlist(extr_p)
pv_ext
extr_p <- str_extract_all(combined_abstracts$clean_abstract, pattern_o)
pv_ext <- unlist(extr_p)
p_values <- lapply(pv_ext, function(x) {
as.numeric(str_extract(x, "\\d*\\.?\\d+"))
})
p_values
pvalues <- lapply(pv_ext, function(x) {
as.numeric(str_extract(x, "\\d*\\.?\\d+"))})
operators <- str_extract(pv_ext, "[<>=]=?|==")
pvalues
data.frame(pvalue=unlist(pvalues), operator=operators)
dfpvalue <- data.frame(pvalue=unlist(pvalues), operator=operators)
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
#p to z imputation function
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(qnorm(1 - p/2))}
catp(dfpvalue$pvalue,  dfpvalue$operator)
df$zscore <- mapply(catp, df$operator, df$pval)
df$zscore <- mapply(catp, df$operator, df$pval)
dfpvalue
operators
rep(NA, nrow(dfpvalue))
pv_vec <- rep(NA, nrow(dfpvalue))
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
warnings()
for (i in 1:nrow(dfpvalue)){
print(i)
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
i=2
catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
dfpvalue$pvalue[i]
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
if(p == 1){p < runif(1, 0.99, 1)}
if(p == 0){p <- runif(1, 0.001, 0.00001)}
return(qnorm(1 - p/2))}
i=2
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
if(p == 1){p < runif(1, 0.99, 1)}
if(p == 0){p <- runif(1, 0.001, 0.0001)}
return(qnorm(1 - p/2))}
catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
runif(1, 0.001, 1e-04)
runif(1, 1e-04,  0.001)
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
if(p == 1){p < runif(1, 0.99, 1)}
if(p == 0){p <- runif(1, 0.00001, 0.001)}
return(qnorm(1 - p/2))}
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
i=2
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
pv_vec
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
if(p == 1){p < runif(1, 0.99, 1)}
if(p == 0){p <- runif(1, 0.00001, 0.001)}
return(qnorm(1 - p/2))}
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
i=2
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
if(p == 1){p < runif(1, 0.99, 1)}
if(p == 0){p <- runif(1, 0.00001, 0.001)}
return(qnorm(1 - p/2))}
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
pv_vec
catp <- function(x, p) {
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
#if(p == 1){p < runif(1, 0.99, 1)}
#if(p == 0){p <- runif(1, 0.00001, 0.001)}
return(qnorm(1 - p/2))}
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
pv_vec
dfpvalue
catp <- function(x, p) {
if(p == 0){p <- 0.0001}
if(p == 1){p <- 0.9999}
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(qnorm(1 - p/2))}
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
pv_vec
View(dfpvalue)
plot(xlen, exp(y), ylim=c(0,1000), xlim=c(0,10))
pattern_p <- "(?i)p\\s*[=<>]\\s*\\.?\\d+\\.?\\d*"
pattern_o <- "(?i)p\\s*([<>=]=?|==)\\s*\\.?\\d+\\.?\\d*"
extr_p <- str_extract_all(combined_abstracts$clean_abstract, pattern_o)
pv_ext <- unlist(extr_p)
pvalues <- lapply(pv_ext, function(x) {
as.numeric(str_extract(x, "\\d*\\.?\\d+"))})
operators <- str_extract(pv_ext, "[<>=]=?|==")
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
dfpvalue$pvalue>1
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
dfpvalue <- dfpvalue[!dfpvalue$pvalue>1]
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
dfpvalue <- dfpvalue[!dfpvalue$pvalue>1,]
catp <- function(x, p) {
if(p == 0){p <- 0.0001}
if(p == 1){p <- 0.9999}
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(qnorm(1 - p/2))}
pv_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])
}
pv_vec
pval     <- unlist(p_values)
operator <- ifelse(pval%in% c(0.05,0.01,0.001)==T, "operator", "full")
z        <- abs(qnorm(1 - pval/2))
ggplot(data.frame(z = z, o = operator), aes(x = z, fill = o)) +
geom_histogram(binwidth = 0.5, color = "black", position = "stack") +
theme_classic()
for (i in 1:nrow(dfpvalue)){
pv_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])}
pval     <- unlist(pvec())
pvec()
pvec
dfpvalue
dfpvalue$operator
z_vec[dfpvalue$operator %in% c("<", ">")]
z_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
z_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])}
z_vec
z_vec[dfpvalue$operator %in% c("<", ">")]
z_vecdfpvalue$operator
dfzvalue <- data.frame(z=z_vec, dfpvalue$operator)
dfzvalue <- data.frame(zvalue=z_vec, operator=dfpvalue$operator)
ggplot(dfzvalue, aes(x = zvalue, fill = operator)) +
geom_histogram(binwidth = 0.5, color = "black", position = "stack") +
theme_classic()
z_list <- list()
for(j in 1:1000){
z_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
z_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])}
z_list[[j]] <- z_vec
}
dfzvalue <- data.frame(zvalue=z_vec, operator=dfpvalue$operator)
View(z_list)
dfzvalue <- data.frame(zvalue=z_vec, operator=dfpvalue$operator)
do.call(rbind.data.frame, z_list)
do.call(rbind, z_list)
do.call(cbind, z_list)
yep <- do.call(cbind, z_list)
View(yep)
yep <- do.call(rbind, z_list)
View(yep)
z_vec
z_list <- list()
for(j in 1:1000){
z_vec <- rep(NA, nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
z_vec[i] <- catp(dfpvalue$operator[i], dfpvalue$pvalue[i])}
z_list[[j]] <- z_vec
}
View(z_list)
dfpvalue$operator[i]
z_list <- list()
for(j in 1:1000){
z_vec <- array(NA, dim=c(nrow(dfpvalue),2))
for (i in 1:nrow(dfpvalue)){
z_vec[i] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
z_list[[j]] <- z_vec
}
catp <- function(x, p) {
if(p == 0){p <- 0.0001}
if(p == 1){p <- 0.9999}
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(qnorm(1 - p/2))}
z_list <- list()
for(j in 1:1000){
z_vec <- array(NA, dim=c(nrow(dfpvalue),2))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
z_list[[j]] <- z_vec
}
yep <- do.call(rbind, z_list)
View(yep)
long_df <- do.call(rbind, z_list)
long_df <- do.call(rbind.data.frame, z_list)
View(yep)
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("operator", "z-value")
seq(0, 10, 0.5)
cut(long_df$`z-value`, seq(0, 10, 0.5))
cut(seq(0, 10, 0.5), long_df$`z-value`)
long_df$`z-value`
cut(as.nummeric(long_df$`z-value`), seq(0, 10, 0.5))
cut(as.numeric(long_df$`z-value`), seq(0, 10, 0.5))
long_df$bin       <- cut(as.numeric(long_df$`z-value`), seq(0, 10, 0.5))
aggregate(data=long_df, `z-value`~bin+operator, mean)
aggregate(data=long_df, `z-value`~bin+operator, sum)
aggregate(data=long_df, `z-value`~bin+operator, sum)
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("operator", "z-value")
long_df$`z-value` <- as.numeric(long_df$`z-value`)
long_df$bin       <- cut(, seq(0, 10, 0.5))
long_df$bin       <- cut(long_df$`z-value`, seq(0, 10, 0.5))
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("operator", "z-value")
long_df$`z-value` <- as.numeric(long_df$`z-value`)
long_df$bin       <- cut(long_df$`z-value`, seq(0, 10, 0.5))
aggregate(data=long_df, `z-value`~bin+operator, sum)
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("operator", "z-value")
long_df$`z-value` <- as.numeric(long_df$`z-value`)
long_df$bin       <- cut(long_df$`z-value`, seq(0, 10, 0.5))
df_bins           <- aggregate(data=long_df, `z-value`~bin+operator, sum)
table(long_df$bin)
View(long_df)
pattern_p <- "(?i)p\\s*[=<>]\\s*\\.?\\d+\\.?\\d*"
pattern_o <- "(?i)p\\s*([<>=]=?|==)\\s*\\.?\\d+\\.?\\d*"
extr_p <- str_extract_all(combined_abstracts$clean_abstract, pattern_o)
pv_ext <- unlist(extr_p)
pvalues <- lapply(pv_ext, function(x) {
as.numeric(str_extract(x, "\\d*\\.?\\d+"))})
pvalues <- lapply(pv_ext, function(x) {
as.numeric(str_extract(x, "\\d*\\.?\\d+"))})
operators <- str_extract(pv_ext, "[<>=]=?|==")
dfpvalue <- data.frame(operator=operators, pvalue=unlist(pvalues))
dfpvalue <- dfpvalue[!dfpvalue$pvalue>1,]
catp <- function(x, p) {
if(p == 0){p <- 0.0001}
if(p == 1){p <- 0.9999}
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(qnorm(1 - p/2))}
z_list <- list()
for(j in 1:1000){
z_vec <- array(NA, dim=c(nrow(dfpvalue),2))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
z_list[[j]] <- z_vec
}
z_list <- list()
for(j in 1:1000){
z_vec <- array(NA, dim=c(nrow(dfpvalue),3))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(j, dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
z_list[[j]] <- z_vec
}
long_df           <- do.call(rbind.data.frame, z_list)
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("iteration", "operator", "z-value")
View(long_df)
long_df$`z-value` <- as.numeric(long_df$`z-value`)
long_df$bin       <- cut(long_df$`z-value`, seq(0, 10, 0.5))
df_bins           <- aggregate(data=long_df, `z-value`~bin+operator+iteration, mean)
View(df_bins)
df_bins           <- aggregate(data=df_bins, `z-value`~bin+operator, mean)
View(df_bins)
ggplot(df_bins, aes(x = `z-value`, fill = operator)) +
geom_histogram(binwidth = 0.5, color = "black", position = "stack") +
theme_classic()
View(df_bins)
df_bins           <- aggregate(data=long_df, `z-value`~bin+operator+iteration, sum)
df_bins           <- aggregate(data=df_bins, `z-value`~bin+operator, sum)
ggplot(df_bins, aes(x = `z-value`, fill = operator)) +
geom_histogram(binwidth = 0.5, color = "black", position = "stack") +
theme_classic()
df_bins           <- aggregate(data=long_df, binoperator+iteration, sum)
df_bins           <- aggregate(data=long_df, bin~operator+iteration, sum)
table(long_df$bin)
table(long_df$bin, long_df$operator)
table(long_df$bin, long_df$operator)/1000
table(long_df$bin, long_df$operator)/1000
as.data.frame(table(long_df$bin, long_df$operator)/1000)
cut(z_vec[,2], seq(0, 10, 0.5))
catp <- function(x, p) {
if(p == 0){p <- 0.0001}
if(p == 1){p <- 0.9999}
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(as.numeric(qnorm(1 - p/2)))}
z_list <- list()
z_vec <- array(NA, dim=c(nrow(dfpvalue),2))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
cut(z_vec[,2], seq(0, 10, 0.5))
cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
z_vec[,3] <- cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
z_vec <- array(NA, dim=c(nrow(dfpvalue),3))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
z_vec <- array(NA, dim=c(nrow(dfpvalue),3))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]))}
z_vec <- array(NA, dim=c(nrow(dfpvalue),3))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i], NA))}
z_vec <- array(NA, dim=c(nrow(dfpvalue),3))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]), NA)}
z_vec[,3] <- cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
View(z_vec)
cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
z_vec <- matrix(NA, ncol = 3, nrow = nrow(dfpvalue))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]), NA)}
z_vec[,3] <- acut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
z_vec[,3] <- cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
View(z_vec)
View(z_vec)
z_vec <- as.data.frame(matrix(NA, ncol = 3, nrow = nrow(dfpvalue)))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]), NA)}
z_vec[,3] <- cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
View(z_vec)
as.data.frame(table(z_vec$V3, z_vec$V1))
z_list <- list()
for(j in 1:1000){
z_vec <- as.data.frame(matrix(NA, ncol = 3, nrow = nrow(dfpvalue)))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]), NA)}
z_vec[,3]   <- cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
z_vec       <- as.data.frame(table(z_vec$V3, z_vec$V1))
z_list[[j]] <- z_vec}
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("iteration", "operator", "z-value")
long_df$`z-value` <- as.numeric(long_df$`z-value`)
View(z_list)
long_df
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("bin", "operator", "count")
df_bins           <- aggregate(data=long_df, bin~operator, mean)
View(long_df)
df_bins           <- aggregate(data=long_df, count~bin+operator, mean)
ggplot(df_bins, aes(x = count, fill = operator)) +
geom_histogram(binwidth = 0.5, color = "black", position = "stack") +
theme_classic()
ggplot(df_bins, aes(x = bin, fill = operator)) +
geom_histogram(binwidth = 0.5, color = "black", position = "stack") +
theme_classic()
ggplot(df_bins, aes(x = bin, y = count)) +
geom_bar(stat = "identity") +      # tell ggplot2 “use my y values”
theme_classic()
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity") +      # tell ggplot2 “use my y values”
theme_classic()
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", width = 1) +
theme_classic()
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) +
theme_classic()
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) +
theme_classic()+
theme(axis.text.x = element_text(hjust=1))
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) +
theme_classic()+
theme(axis.text.x = element_text(hjust=1, angle=45))
combined_abstracts$clean_abstract
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) + scale_fill_grey(start = 0.85, end = 0.15)+
theme_classic()+xlab("z-value")+geom_vline(xintercept=1.96, lty=1.2)
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) + scale_fill_grey(start = 0.85, end = 0.15)+
theme_classic()+xlab("z-value")+geom_vline(xintercept=1.96, lty=1.2)+
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) + scale_fill_grey(start = 0.85, end = 0.15)+
theme_classic()+xlab("z-value")+geom_vline(xintercept=4, lty=1.2)+
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) + scale_fill_grey(start = 0.85, end = 0.15)+
theme_classic()+xlab("z-value")+geom_vline(xintercept=4.5, lty=1.2)+
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) + scale_fill_grey(start = 0.85, end = 0.15)+
theme_classic()+xlab("z-value")+geom_vline(xintercept=4.5, lty=2, lwd=1.2)+
theme(axis.text.x = element_text(hjust=1, angle=45))
ptozbar(combined_abstracts$clean_abstract)
ptozbar <- function(text){
pattern_p <- "(?i)p\\s*[=<>]\\s*\\.?\\d+\\.?\\d*"
pattern_o <- "(?i)p\\s*([<>=]=?|==)\\s*\\.?\\d+\\.?\\d*"
extr_p <- str_extract_all(text, pattern_o)
pv_ext <- unlist(extr_p)
pvalues <- lapply(pv_ext, function(x) {
as.numeric(str_extract(x, "\\d*\\.?\\d+"))})
operators <- str_extract(pv_ext, "[<>=]=?|==")
dfpvalue  <- data.frame(operator=operators, pvalue=unlist(pvalues))
dfpvalue  <- dfpvalue[!dfpvalue$pvalue>1,]
catp <- function(x, p) {
if(p == 0){p <- 0.0001}
if(p == 1){p <- 0.9999}
if (is.na(x)) {
return(qnorm(1 - p/2))
} else if (x == "<") { p <- runif(1, 0, p)
} else if (x == ">"){ p <- runif(1, p, 1)}
return(qnorm(1 - p/2))}
z_list <- list()
for(j in 1:1000){
z_vec <- as.data.frame(matrix(NA, ncol = 3, nrow = nrow(dfpvalue)))
for (i in 1:nrow(dfpvalue)){
z_vec[i,] <- cbind(dfpvalue$operator[i], catp(dfpvalue$operator[i], dfpvalue$pvalue[i]), NA)}
z_vec[,3]   <- cut(as.numeric(z_vec[,2]), seq(0, 10, 0.5))
z_vec       <- as.data.frame(table(z_vec$V3, z_vec$V1))
z_list[[j]] <- z_vec}
long_df           <- do.call(rbind.data.frame, z_list)
colnames(long_df) <- c("bin", "operator", "count")
df_bins           <- aggregate(data=long_df, count~bin+operator, mean)
ggplot(df_bins, aes(x = bin, y = count, fill = operator)) +
geom_bar(stat = "identity", col="black", width = 1) + scale_fill_grey(start = 0.85, end = 0.15)+
theme_classic()+xlab("z-value")+geom_vline(xintercept=4.5, lty=2, lwd=1.2)+
theme(axis.text.x = element_text(hjust=1, angle=45))
}
ptozbar(combined_abstracts$clean_abstract)
ptozbar(combined_abstracts$clean_abstract)
yep
yep <- glmmTMB::glmmTMB(citations~log(count)+log(year), data=causal_citations, family = nbinom2(link="log"))
DHARMa::plotQQunif(yep, plot=T)
summary(yep)
library(EcoPostView)
#Upload the data (literature) and priors
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025_Supplementary_Information_2.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
literature  <- read_xlsx(destfile, 1)
library(readxl)
#Upload the data (literature) and priors
url         <- "https://raw.githubusercontent.com/snwikaij/Data/main/Unknown_Kaijser_et_al._2025_Supplementary_Information_2.xlsx"
destfile    <- tempfile(fileext = ".xlsx")
download.file(url, destfile, mode = "wb")
literature  <- read_xlsx(destfile, 1)
c(literature$DOI)
c(unique(literature$DOI))
paste(unique(literature$DOI))
paste(unique(literature$DOI), collapse = ",")
paste(unique(literature$DOI), collapse = ",")
writexl::write_xlsx(paste(unique(literature$DOI), collapse = ","))
writexl::write_xlsx(paste(unique(literature$DOI), collapse = ","), "alldoi.xlsx")
writexl::write_xlsx(data.frame(x=paste(unique(literature$DOI)), collapse = ","), "alldoi.xlsx")
paste(unique(literature$DOI), collapse = ",")
writexl::write_xlsx(data.frame(x=paste(unique(literature$DOI))), collapse = ","), "alldoi.xlsx")
writexl::write_xlsx()
?writexl::write_xlsx()
writexl::write_xlsx(data.frame(x=paste(unique(literature$DOI))), collapse = ","), file="alldoi.xlsx")
writexl::write_xlsx(data.frame(x=paste(unique(literature$DOI), collapse = ",")), file="alldoi.xlsx")
writexl::write_xlsx(data.frame(x=paste(unique(literature$DOI), collapse = ",")), "alldoi.xlsx")
wd()
22,25,57–66,66–151
151-66
66-57
85+11

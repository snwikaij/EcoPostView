xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
hop(mod, group="Algae", predictor = c("Salinity", "Nutrient-N"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(TP ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nMacrophyte \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
hop(mod, group="Algae", predictor = c("Salinity", "Nutrient-N"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(TP ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nAlgae \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
hop(mod, group="Fish", predictor = c("Salinity", "Oxygen"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(Oxygen ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nFish \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
log(5)
log(16)
hop(mod, group="Fish", predictor = c("Salinity", "Oxygen"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(Oxygen ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nFish \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(1.61, 2.77), round_y_axis = 0,
hop_lwd = 0.3)
hop(mod, group="Invertebrates", predictor = c("Oxygen", "Sediment"),
xlab = expression(Oxygen ~ mg ~ L^-1),
ylab = "Fine sediment (%)",
exp_disp = T, gradient_title = "Predicted \ninvertebrate \nrichness",
pdp_resolution = 100,
link_function = "log",
xlimit =c(1.61, 2.77), round_x_axis = 0,
ylimit =c(-4.6, -0.92), round_y_axis = 2,
hop_lwd = 0.3)
hop(mod, group="Algae", predictor = c("Salinity", "Nutrient-N"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(TP ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nAlgae \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
hop(mod, group="Fish", predictor = c("Salinity", "Oxygen"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(Oxygen ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nFish \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(1.61, 2.77), round_y_axis = 0,
hop_lwd = 0.3)
hop(mod, group="Bacteria", predictor = c("Oxygen", "Nutrient-N"),
xlab = expression(Oxygen ~ mg ~ L^-1),
ylab =  expression(TN ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nBacterio \nOTU count",
pdp_resolution = 100,
link_function = "log",
xlimit =c(1.61, 2.77), round_x_axis = 0,
ylimit =c(-4.6, -0.92), round_y_axis = 2,
hop_lwd = 0.3)
log(1)
log(10)
hop(mod, group="Bacteria", predictor = c("Oxygen", "Nutrient-N"),
xlab = expression(Oxygen ~ mg ~ L^-1),
ylab =  expression(TN ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nBacteria \nOTU count",
pdp_resolution = 100,
link_function = "log",
xlimit =c(1.61, 2.77), round_x_axis = 0,
ylimit =c(0, 2.3), round_y_axis = 2,
hop_lwd = 0.3)
p2 <- hop(mod, group="Algae", predictor = c("Salinity", "Nutrient-N"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(TP ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nAlgae \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
p3 <- hop(mod, group="Invertebrates", predictor = c("Oxygen", "Sediment"),
xlab = expression(Oxygen ~ mg ~ L^-1),
ylab = "Fine sediment (%)",
exp_disp = T, gradient_title = "Predicted \ninvertebrate \nrichness",
pdp_resolution = 100,
link_function = "log",
xlimit =c(1.61, 2.77), round_x_axis = 0,
ylimit =c(-4.6, -0.92), round_y_axis = 2,
hop_lwd = 0.3)
p1 <- hop(mod, group="Bacteria", predictor = c("Oxygen", "Nutrient-N"),
xlab = expression(Oxygen ~ mg ~ L^-1),
ylab =  expression(TN ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nBacteria \nOTU count",
pdp_resolution = 100,
link_function = "log",
xlimit =c(1.61, 2.77), round_x_axis = 0,
ylimit =c(0, 2.3), round_y_axis = 2,
hop_lwd = 0.3)
p2 <- hop(mod, group="Algae", predictor = c("Salinity", "Nutrient-N"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(TP ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nAlgae \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(0, 3.4), round_y_axis = 0,
hop_lwd = 0.3)
p3 <- hop(mod, group="Invertebrates", predictor = c("Oxygen", "Sediment"),
xlab = expression(Oxygen ~ mg ~ L^-1),
ylab = "Fine sediment (%)",
exp_disp = T, gradient_title = "Predicted \ninvertebrate \nrichness",
pdp_resolution = 100,
link_function = "log",
xlimit =c(1.61, 2.77), round_x_axis = 0,
ylimit =c(-4.6, -0.92), round_y_axis = 2,
hop_lwd = 0.3)
p4 <- hop(mod, group="Fish", predictor = c("Salinity", "Oxygen"),
xlab = expression(Salinity ~ uS ~ cm^-1),
ylab = expression(Oxygen ~ mg ~ L^-1),
exp_disp = T, gradient_title = "Predicted \nFish \nrichness",
pdp_resolution = 120,
link_function = "log",
xlimit =c(1.61, 5.71), round_x_axis = 0,
ylimit =c(1.61, 2.77), round_y_axis = 0,
hop_lwd = 0.3)
cowplot::plot_grid(p1, p2, p3, p4, ncol=4)
cowplot::plot_grid(p1, p2, p3, p4, ncol=2)
5/3
usethis::use_vignette("EcoPostView")
library(exmapl1)
library(exmaple1)
data(example1)
?meta
library(EcoPostView)
?EcoPostView::meta
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
method=2,
n_iter = 20000,
n_thin=5)
mod$model$JAGS_model
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_iter = 15000,
n_thin=20)
mod$model$JAGS_model
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_iter = 30000,
n_thin = 30)
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_chain=4
n_iter=30000,
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_chain=4,
n_iter=30000,
n_thin=30)
mod$model$JAGS_model
mod$model$JAGS_model$model
mod$model$JAGS_model
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n)
mod
mod$model$JAGS_model
mod$model
mod$model$JAGS_model
mod$model$JAGS_model
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n)
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_thin = 10)
mod$model$JAGS_model
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_thin = 10,
n_chain = 4)
mod$model$JAGS_model
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_thin = 10,
n_chain = 6)
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_thin = 10,
n_chain = 4)
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_thin = 15,
n_chain = 4)
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
n_thin = 10,
n_chain = 6)
#install.packages("devtools")
library(devtools)
#install.github("snwikaij/EcoPostView")
library(EcoPostView)
raw <- mod$model$JAGS_model
raw
raw[c(1:40),]
raw$BUGSoutput$summary[c(1:40),]
raw$BUGSoutput$summary[c(1:20),]
raw$BUGSoutput$summary[c(1:30),]
raw$BUGSoutput$summary[c(1:25),]
raw$BUGSoutput$summary[c(1:28),]
raw$BUGSoutput$summary[c(1:26),]
raw$BUGSoutput$summary[c(1:25),]
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n) #Thinning argument
mod$model$JAGS_model$BUGSoutput$summary[c(1:25),]
mod$model$JAGS_model$BUGSoutput$summary[c(18:25),]
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n) #Thinning argument
data("example1")
mod <-meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n) #Thinning argument
mod$model$JAGS_model$BUGSoutput
system("git lfs track '*.RData'")
system("git lfs ls-files")
system("git commit -m 'Remove mod.RData from tracking'")
system("git push origin main")
system("git status")
system("git rm --cached mod.RData")
system("git commit -m 'Remove mod.RData from tracking'")
system("git ls-files | grep mod.RData")
system("git add .gitattributes")
list.files()
list.files()
system("git status")
system("git push origin main")
system("git reset --soft HEAD~1")
system("git reset --soft HEAD~1")
system("git reset --soft HEAD~1")
system("git reset --soft HEAD~1")
system("git reset --soft HEAD~1")
system("git reset --soft HEAD~1")
system("git push origin main --force")
library(EcoPostView)
build_vignettes()
library(devtools)
build_vignettes()
# Add the HTML files to Git
# Commit the changes
system("git commit -m 'Add vignettes in HTML format'")
# Push to GitHub (make sure you are on the correct branch)
system("git push origin main")  # Replace 'main' with your branch name if differentsystem("git add docs/*.html")
system("git add docs/*.html")
system("git status")
system("git push origin main")
system("git commit -m 'Add EcoPostView.html vignette'")
list.files()
system("git status")
system("git add doc/EcoPostView.html")
library(EcoPostView)
redirect_content <- "
<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='UTF-8'>
<meta name='viewport' content='width=device-width, initial-scale=1.0'>
<meta http-equiv='refresh' content='0; url=EcoPostView.html'>
<title>Redirecting to EcoPostView Documentation</title>
</head>
<body>
<p>If you are not redirected automatically, follow this <a href='EcoPostView.html'>link to the EcoPostView documentation</a>.</p>
</body>
</html>
"
# Write the redirect content to the index.html file in the docs folder
writeLines(redirect_content, "docs/index.html")
redirect_content <- "
<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='UTF-8'>
<meta name='viewport' content='width=device-width, initial-scale=1.0'>
<meta http-equiv='refresh' content='0; url=EcoPostView.html'>
<title>Redirecting to EcoPostView Documentation</title>
</head>
<body>
<p>If you are not redirected automatically, follow this <a href='EcoPostView.html'>link to the EcoPostView documentation</a>.</p>
</body>
</html>
"
# Write the redirect content to the index.html file in the docs folder
writeLines(redirect_content, "doc/index.html")
list.files("doc")
file.rename("docs", "doc")
file.rename("docs", "doc")
file.rename("doc", "docs")
library(EcoPostView)
install_github("snwikaij/EcoPostView")
only_priors <- meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
method=2,
n_chain = 6,
get_prior_only=TRUE)
data(example1)
only_priors <- meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
method=2,
n_chain = 6,
get_prior_only=TRUE)
only_priors
read_excel("C:/Users/admin/OneDrive/Bureaublad/example2.xlsx")
library(readxl)
read_excel("C:/Users/admin/OneDrive/Bureaublad/example2.xlsx")
example2 <- read_excel("C:/Users/admin/OneDrive/Bureaublad/example2.xlsx")
save(example2)
save(example2, file="Example2.RData")
save(example2, file="example2.RData")
mod3 <- meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
method=2,
n_chain = 6)
data(example1)
mod3 <- meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
Nsamp=example1$n,
method=2,
n_chain = 6)
?meta
data(example2)
example2[c(2,4,5)]
mod3 <- meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
prior_mu = example2[c(2,4,6)],
prior_mu_se = example2[c(3,5,7)],
Nsamp=example1$n,
method=2,
n_chain = 6)
example2[c(3,5,7)]
example2[c(2,4,6)]
mod3 <- meta(estimate=example1$est,
stderr=example1$se,
parameter=example1$parameter,
predictor=example1$predictor,
link_function=example1$link,
grouping=example1$group,
prior_mu = example2[c(2,4,6)],
prior_mu_se = example2[c(3,5,7)],
prior_weights = c(1/3, 1/3, 1/3),
Nsamp=example1$n,
method=2,
n_chain = 6)
pdplot(mod3)
library(ggplot2)
pdplot(mod3)
devtools::document()
devtools::document()
usethis::use_data(example2)
library(EcoPostView)
devtools::document()
system("git push origin main")
# If there are changes to commit
system("git add doc/*")  # Add the changes
system("git commit -m 'Update vignette'")  # Commit the changes
system("git push origin main")  # Push to the main branch
# If there are changes to commit
system("git add docs/*")  # Add the changes
system("git commit -m 'Update vignette'")  # Commit the changes
system("git push origin main")  # Push to the main branch
# If there are changes to commit
system("git add docs/*")  # Add the changes
system("git commit -m 'Update vignettes'")  # Commit the changes
system("git push origin main")  # Push to the main branch
# If there are changes to commit
system("git add docs/*")
system("git add -f docs/*")
system("git status")
system("git commit -m 'Force add docs folder and update files'")
system("git add -f docs/*")
system("git commit -m 'Update .gitignore and add docs files'")
system("git add -f docs/")
system("git commit -m 'Force update all documents in docs folder'")
system("git reset --soft HEAD~1")
file.edit(".gitignore")
system("git add -f docs/")
status <- system("git status", intern = TRUE)
cat(status, sep = "\n")
system("git push -f origin main")
system("git pull origin main")
system("git pull origin main")
system("git commit -m 'Update docs folder'")
system("git add -f docs/EcoPostView.html")
system("git add -f docs/EcoPostView.R")
system("ls -la docs")
system("git config --list")
system("git commit -m 'Add files to docs folder'")

ylab= expression(Nutrient-N ~ "[" * mg ~ L^-1 * "]"),
gradient_title = "MAP Algae \neveness",
pdp_resolution = 100,
link_function = "log",
exp_axis = T,
round_x_axis = 0,
round_y_axis = 0,
xlim=c(3.91, 8.5172),
ylim=c(-1.5, 3.4),
xtextsize = 8,
ytextsize = 8)
pdp1 <- pdp1+theme(legend.title = element_text(size=8),
legend.key.size = unit(4, 'mm'))
pdp1
pdp2 <- hop(mod,
group="Invertebrates",
predictor = c("Sediment-enrichment", "Oxygen-depletion"),
xlab= "Fine sediment fraction",
ylab= expression(Oxygen ~ "[" * mg ~ L^-1 * "]"),
gradient_title = "MAP Invertebrate \ntaxonomic richness",
pdp_resolution = 100,
link_function = "log",
exp_axis = T,
round_x_axis = 2,
round_y_axis = 0,
xlim=c(-4.61, -0.92),
ylim=c(1.61, 2.77),
xtextsize = 8,
ytextsize = 8)
pdp2 <- pdp2+theme(legend.title = element_text(size=8),
legend.key.size = unit(4, 'mm'))
fig4_main <- cowplot::plot_grid(pdp1, pdp2, ncol = 1, labels = "auto")
fig4_main
fig4_main <- cowplot::plot_grid(pdp1, pdp2, ncol = 1, labels = "auto")
ggsave(fig4_main, filename="C:/Users/admin/OneDrive/Bureaublad/Paper3/Figures/Fig4_main.jpeg", units = "mm", width = 120, height = 120, dpi = 300)
title_pl_log   <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
pdp_combined <- cowplot::plot_grid(title_pl_log,
postdens$posterior_density$log,
title_pl_logit,
postdens$posterior_density$logit,
ncol=1,
rel_heights = c(0.05, 0.2, 0.05, 0.2))
ggsave(pdp_combined, filename="C:/Users/admin/OneDrive/Bureaublad/Paper3/Figures/Fig2_main.jpeg", units = "mm", width = 190, height = 240, dpi = 300)
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)))+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_log
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)))+theme_void()+annotate("text", -1, 0, size = 6, label="Taxonomic richness")
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_log
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()+annotate("text", 0, 1, size = 6, label="Taxonomic richness")
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()+annotate("text", x=0, y=1, size = 6, label="Taxonomic richness")
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()+
annotate("text", x=0, y=1, size = 6, label="Taxonomic richness")
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()+
annotate("text", x=0, y=1, size = 6, label="Taxonomic richness")
title_pl_log
title_pl_log   <- ggplot(data.frame(x=c(0,1), y=c(0,1)), aes(x, y))+theme_void()+
annotate("text", x=-1, y=1, size = 6, label="Taxonomic richness")
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
title_pl_log
mod_inv <- mod
mod_inv$Estimates$b1$estimate[mod_inv$Estimates$b1$predictor %in% c("Flow-cessation", "Oxygen-depletion")] <- -1*mod_inv$Estimates$b1$estimate[mod_inv$Estimates$b1$predictor %in% c("Flow-cessation", "Oxygen-depletion")]
mod_inv <- mod
mod_inv$Estimates$b1$estimate[mod_inv$Estimates$b1$predictor %in% c("Flow-cessation", "Oxygen-depletion")] <- -1*mod_inv$Estimates$b1$estimate[mod_inv$Estimates$b1$predictor %in% c("Flow-cessation", "Oxygen-depletion")]
postdens       <- pdplot(mod_inv, order_predictor = order_p, order_group = order_g)
postdens       <- pdplot(mod_inv, order_predictor = order_p, order_group = order_g)
title_pl_log   <- ggplot()+theme_void()+annotate("text", x=0, y=1, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
postdens       <- pdplot(mod_inv, label_size = 1.2,
order_predictor = order_p, order_group = order_g)
title_pl_log   <- ggplot()+theme_void()+annotate("text", x=0, y=1, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
title_pl_log   <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
pdp_combined <- cowplot::plot_grid(title_pl_log,
postdens$posterior_density$log,
title_pl_logit,
postdens$posterior_density$logit,
ncol=1,
rel_heights = c(0.025, 0.2, 0.025, 0.2))
pdp_combined
postdens       <- pdplot(mod_inv, label_size = 0.8,
order_predictor = order_p, order_group = order_g)
title_pl_log   <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
pdp_combined <- cowplot::plot_grid(title_pl_log,
postdens$posterior_density$log,
title_pl_logit,
postdens$posterior_density$logit,
ncol=1,
rel_heights = c(0.025, 0.2, 0.025, 0.2))
pdp_combined
?pdp
?pdplot
postdens       <- pdplot(mod_inv, title_size = 2.5,
order_predictor = order_p, order_group = order_g)
postdens       <- pdplot(mod_inv, title_size = 2.5, xlab=c("Probability distribution"),
ylab=c("Parameter estimate [=regression coefficient]"),
order_predictor = order_p, order_group = order_g)
title_pl_log   <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
pdp_combined <- cowplot::plot_grid(title_pl_log,
postdens$posterior_density$log,
title_pl_logit,
postdens$posterior_density$logit,
ncol=1,
rel_heights = c(0.025, 0.2, 0.025, 0.2))
pdp_combined
postdens       <- pdplot(mod_inv, title_size = 2.5,
xlab=c("Parameter estimate [=regression coefficient]"),
ylab=c("Probability distribution"),
order_predictor = order_p, order_group = order_g)
title_pl_log   <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
pdp_combined <- cowplot::plot_grid(title_pl_log,
postdens$posterior_density$log,
title_pl_logit,
postdens$posterior_density$logit,
ncol=1,
rel_heights = c(0.025, 0.2, 0.025, 0.2))
ggsave(pdp_combined, filename="C:/Users/admin/OneDrive/Bureaublad/Paper3/Figures/Fig2_main.jpeg", units = "mm", width = 190, height = 240, dpi = 300)
postdens       <- pdplot(mod_inv, title_size = 2,
xlab=c("Parameter estimate [=regression coefficient]"),
ylab=c("Probability distribution"),
order_predictor = order_p, order_group = order_g)
title_pl_log   <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Taxonomic richness")
title_pl_logit <- ggplot()+theme_void()+annotate("text", 0, 0, size = 6, label="Evenness")
pdp_combined <- cowplot::plot_grid(title_pl_log,
postdens$posterior_density$log,
title_pl_logit,
postdens$posterior_density$logit,
ncol=1,
rel_heights = c(0.025, 0.225, 0.025, 0.225))
ggsave(pdp_combined, filename="C:/Users/admin/OneDrive/Bureaublad/Paper3/Figures/Fig2_main.jpeg", units = "mm", width = 190, height = 240, dpi = 300)
bintest <- function(){
for (i in 1:nclust) {
#Likelihood
count[i]    ~ dbin(frac[i], n[i])
frac[i]     ~ dbeta(alpha[i],beta[i])
#Priors
alpha[i]    ~ dgamma(1,0.01)
beta[i] ~ dgamma(1,0.01)
}
}
datastuff <- list(count=c(100, 100, 100, 100),
n=c(200, 200, 200, 200),
nclust=4)
binmod <- jags(data = datastuff,
model.file = bintest,
parameters.to.save =  c("frac"))
mcmcplots::traplot(binmod)
datastuff <- list(count=c(800, 300, 400, 300),
n=c(200, 200, 200, 200),
nclust=4)
bintest <- function(){
for (i in 1:nclust) {
#Likelihood
count[i]    ~ dbin(frac[i], n[i])
frac[i]     ~ dbeta(alpha[i],beta[i])
#Priors
alpha[i]~ dgamma(1,0.01)
beta[i] ~ dgamma(1,0.01)}
}
binmod <- jags(data = datastuff,
model.file = bintest,
parameters.to.save =  c("frac"))
datastuff <- list(count=c(800, 300, 400, 300),
n=c(1000, 1000, 1000, 1000),
nclust=4)
bintest <- function(){
for (i in 1:nclust) {
#Likelihood
count[i]    ~ dbin(frac[i], n[i])
frac[i]     ~ dbeta(alpha[i],beta[i])
#Priors
alpha[i]~ dgamma(1,0.01)
beta[i] ~ dgamma(1,0.01)}
}
binmod <- jags(data = datastuff,
model.file = bintest,
parameters.to.save =  c("frac"))
mcmcplots::traplot(binmod)
binmod <- jags(data = datastuff,
thin=5,
model.file = bintest,
parameters.to.save =  c("frac"))
binmod <- jags(data = datastuff,
n.thin=5,
model.file = bintest,
parameters.to.save =  c("frac"))
mcmcplots::traplot(binmod)
datastuff <- list(count=c(6500, 7000, 8900, 7000),
n=c(10000, 10000, 10000, 10000),
nclust=4)
bintest <- function(){
for (i in 1:nclust) {
#Likelihood
count[i]    ~ dbin(frac[i], n[i])
frac[i]     ~ dbeta(alpha[i],beta[i])
#Priors
alpha[i]~ dgamma(1,0.01)
beta[i] ~ dgamma(1,0.01)}
}
binmod <- jags(data = datastuff,
n.thin=5,
model.file = bintest,
parameters.to.save =  c("frac"))
mcmcplots::traplot(binmod)
mcmcplots::denplot(binmod)
binmod <- jags(data = datastuff,
n.thin=5, n.chains = 10,
model.file = bintest,
parameters.to.save =  c("frac"))
mcmcplots::traplot(binmod, parms = c("frac"))
mcmcplots::traplot(binmod, parms = c("frac"))
mcmcplots::denplot(binmod, parms = c("frac"))
datastuff <- list(count=c(6500, 7000, 8900, 7000),
n=c(10000, 10000, 10000, 10000),
nclust=4)
bintest <- function(){
for (i in 1:nclust) {
#Likelihood
count[i]     ~ dbin(fraction[i], n[i])
fraction[i]  ~ dbeta(alpha[i],beta[i])
#Priors
alpha[i]~ dgamma(1,0.01)
beta[i] ~ dgamma(1,0.01)}
}
binmod <- jags(data = datastuff,
n.thin=5, n.chains = 10,
model.file = bintest,
parameters.to.save =  c("frac"))
datastuff <- list(count=c(6500, 7000, 8900, 7000, 9000, 8000),
n=c(10000, 10000, 10000, 10000, 10000, 10000),
nclust=6)
bintest <- function(){
for (i in 1:nclust) {
#Likelihood
count[i]     ~ dbin(fraction[i], n[i])
fraction[i]  ~ dbeta(alpha[i],beta[i])
#Priors
alpha[i]~ dgamma(1,0.01)
beta[i] ~ dgamma(1,0.01)}
}
binmod <- jags(data = datastuff,
n.thin=5, n.chains = 10,
model.file = bintest,
parameters.to.save =  c("fraction"))
mcmcplots::traplot(binmod, parms = c("frac"))
mcmcplots::traplot(binmod, parms = c("frac"))
mcmcplots::traplot(binmod, parms = c("fraction"))
mcmcplots::denplot(binmod, parms = c("frac"))
mcmcplots::denplot(binmod, parms = c("fraction"))
mcmcplots::traplot(binmod, parms = c("fraction"))+theme_classic()
mcmcplots::denplot(binmod, parms = c("fraction"))
library(readxl)
BioAu24_Vogelkartierung_clean_aggregiert_1_ <- read_excel("C:/Users/admin/Downloads/BioAu24_Vogelkartierung_clean_aggregiert (1).xlsx")
View(BioAu24_Vogelkartierung_clean_aggregiert_1_)
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/admin/Downloads/BioAu24_Vogelkartierung_clean_aggregiert (1).xlsx")
# Run the nmds using Jaccard index
set.seed(123)
nmds1 <- vegan::metaMDS(df3, distance = "jaccard")
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/admin/Downloads/BioAu24_Vogelkartierung_clean_aggregiert (1).xlsx")
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/cschu/iCloudDrive/Biodiv Master/4. Semester/Masterarbeit/R/Durchg?nge_n?tig/BioAu24_Vogelkartierung_clean_aggregiert.xlsx")
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/admin/OneDrive/Bureaublad/BioAu/BioAu24_Vogelkartierung_clean_aggregiert.xlsx")
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/admin/OneDrive/Bureaublad/BioAu/BioAu24_Vogelkartierung_clean_aggregiert.xlsx")
# Run the nmds using Jaccard index
set.seed(123)
nmds1 <- vegan::metaMDS(df3, distance = "jaccard")
nmds1 <- vegan::metaMDS(df1, distance = "jaccard")
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/admin/OneDrive/Bureaublad/BioAu/BioAu24_Vogelkartierung_clean_aggregiert.xlsx")
View(df1)
library(readxl)
library(ggplot2)
library(cowplot)
library(tidyr)
library(vegan)
#Upload the dataset the path (name to the folder) need to be changed.
#In Rstudio you can also go to enverionment (right window) select import dataset and
#From excel
df1 <- read_excel("C:/Users/admin/OneDrive/Bureaublad/BioAu/BioAu24_Vogelkartierung_clean_aggregiert.xlsx")
#Create a dataset with the five areas and the sum of all observed species
df2 <- aggregate(data=df1, `Anzahl Sichtungen`~Artname*Untersuchungsgebiet*`Plot-Nr.`, sum)
#Generate a species matrix for the nmds or pcoa
df3 <- spread(df2, Artname, `Anzahl Sichtungen`)
#Shorten the names to prevent horror in the figure
#Select first four letters of species and genus names and paste together with "_"
newnames <- paste0(substr(do.call(rbind, strsplit(colnames(df3[-c(1:2)]), " "))[,1], 0, 4), "_", substr(do.call(rbind, strsplit(colnames(df3[-c(1:2)]), " "))[,2], 0, 4))
colnames(df3)[c(3:ncol(df3))] <- newnames
#performe nmds but for
#set combination of site and plot as rownames
rownames(df3) <- paste(df3[,1], df3[,2])
#set na to 0
df3[is.na(df3)] <- 0
#perform the nmds
set.seed(123)
nmds <- vegan::metaMDS(df3[-c(1:2)], distance = "bray")
#some selection criteria for display
spec_disp    <- envfit(nmds, df3[-c(1:2)])
display_only <- names(spec_disp$vectors$pvals)[spec_disp$vectors$pvals<0.1]
#Create a list to store the information we want to display together
positions_nmds <- list()
#The position of all species in a data frame called species
positions_nmds[["species"]]              <- cbind.data.frame(nmds$species)
colnames(positions_nmds[["species"]])    <- c("MDS1", "MDS2")
positions_nmds[["species"]]              <- positions_nmds$species[rownames(positions_nmds$species) %in% display_only,]
#The position of all areas (sites)
positions_nmds[["sites"]]              <- cbind.data.frame(nmds$points)
#sites and species data frames
sites_df   <- positions_nmds$sites
species_df <- positions_nmds$species
#Extract the areas from the rownames to create the hulls
sites_df$group <- do.call(rbind, strsplit(rownames(sites_df), " "))[,1]
#Create separate list to generate a hull to plot
mds_hull   <- split(sites_df, sites_df$group)
mds_hull2  <- do.call(rbind, lapply(mds_hull, function(x) x[chull(x[c("MDS1", "MDS2")]),]))
rownames(mds_hull2) <- NULL
#Set colours for groups
colis  <- c("tomato3", "dodgerblue3", "green4", "purple3", "lightblue")
col_df <- data.frame(group=unique(sites_df$group), col=colis)
#Plot the results with ggplot2
fig1 <- ggplot(sites_df, aes(MDS1, MDS2, col=do.call(rbind, strsplit(rownames(sites_df), " "))[,1])) +
labs(col="Sites", fill="Sites") +
annotate("text", x=species_df$MDS1, y=species_df$MDS2, label=rownames(species_df), size=3) +
geom_vline(xintercept = 0, lty=2) +
geom_hline(yintercept = 0, lty=2) +
geom_point(size=2, pch=19) +
geom_polygon(data=mds_hull2, aes(x=MDS1, y=MDS2, group=group, fill=group),
inherit.aes=F, alpha=0.2) +
scale_fill_manual(values=col_df$col, breaks=col_df$group) +
scale_color_manual(values=col_df$col, breaks=col_df$group) +
theme(axis.line = element_line(colour = "black", linewidth = .4),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
legend.spacing = unit(0.01, "cm"),
legend.text = element_text(size=10),
panel.border = element_rect(colour = "black", fill=NA, size=.6),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title =  element_text(size=10))
ggsave(fig1, filename = "C:/Users/admin/OneDrive/Bureaublad/BioAu/Fig1.JPEG",
width = 190, height = 150, units = "mm")
Create a dataset with the five areas and the sume of all observed species
#Create a dataset with the five areas and the sume of all observed species
df2 <- aggregate(data=df1, `Anzahl Sichtungen`~Artname*Untersuchungsgebiet, sum)
#Generate a species matrix for the nmds or pcoa
df3 <- spread(df2, Artname, `Anzahl Sichtungen`)
#performe nmds but for
#set first column as rownames in the dataframe the nmds function sets the rownames as names in the analysis
rownames(df3) <- df3[,1]
#remover rownames for aesthetic reasons
df3 <- df3[,-1]
#In the spread function the matrix creates which species were found per area and which not
#If a species was not found NA (Not Available) is introduced.  However, the NMDS needs numbers
#Therefore we say no species (0) was observed.
df3[is.na(df3)] <- 0
#Run the nmds
set.seed(123)
nmds <- vegan::metaMDS(df3)
#Create a list to store the information we want to display together
positions_nmds <- list()
#The position of all species in a dataframe called species
positions_nmds[["species"]]              <- cbind.data.frame(nmds$species)
colnames(positions_nmds[["species"]])    <- c("MDS1", "MDS2")
#The position of all areas (sites)
positions_nmds[["sites"]]              <- cbind.data.frame(nmds$points)
#sites and species dataframes
sites_df   <- positions_nmds$sites
species_df <- positions_nmds$species
# Füge eine Gruppenspalte hinzu
sites_df$group <- do.call(rbind, strsplit(rownames(sites_df), " "))[,1]
# Definiere die gewünschte Reihenfolge der Untersuchungsgebiete
desired_order <- c("Halima", "Lippeschlinge", "Lippebogen", "Selm", "Damann")
sites_df$group <- factor(sites_df$group, levels = desired_order)
# Definiere benutzerdefinierte Farben für die Gruppen
custom_colors <- c("dodgerblue3", "green4", "yellow", "orange", "tomato3")
# Aktualisierter ggplot-Code
nmdsplot <- ggplot(sites_df, aes(MDS1, MDS2, col = group)) +  # Verwende die Gruppenspalte
labs(col = "Untersuchungsgebiete") +  # Beschriftung der Legende
annotate("text", x = species_df$MDS1, y = species_df$MDS2, label = rownames(species_df), size = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_hline(yintercept = 0, lty = 2) +
geom_point(size = 6, pch = 19, position = position_jitter(width = 0.01, height = 0.01)) +
scale_color_manual(values = custom_colors) +  # Benutzerdefinierte Farben
ggtitle("NMDS aggregiert für Probeflächen mit Bray Curtis als Ähnlichkeitsindex (quantitativ)") +
theme(axis.line = element_line(colour = "black", linewidth = .4),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
legend.spacing = unit(0.01, "cm"),
legend.text = element_text(size = 6),
legend.margin = margin(t = -15),
panel.border = element_rect(colour = "black", fill = NA, size = .6),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title = element_text(size = 6))
# Create a dataset with the five areas and the sum of all observed species
df2 <- aggregate(data=df1, `Anzahl Sichtungen`~Artname*Untersuchungsgebiet*`Plot-Nr.`, sum)
# Generate a species matrix for the NMDS or PCoA
df3 <- spread(df2, Artname, `Anzahl Sichtungen`)
View(df3)
# Shorten the names to prevent horror in the figure
# Select first four letters of species and genus names and paste together with "_"
newnames <- paste0(substr(do.call(rbind, strsplit(colnames(df3[-c(1:2)]), " "))[,1], 0, 4), "_",
substr(do.call(rbind, strsplit(colnames(df3[-c(1:2)]), " "))[,2], 0, 4))
colnames(df3)[c(3:ncol(df3))] <- newnames
# Perform NMDS
# Set combination of site and plot as rownames
rownames(df3) <- paste(df3[,1], df3[,2])
# Set NA to 0
df3[is.na(df3)] <- 0
df3[c(3:ncol(df3))]
df3[c(2:3)] <- decostand(df3[c(3:ncol(df3))], method = "pa")
df3[c(3:ncol(df3))] <- decostand(df3[c(3:ncol(df3))], method = "pa")
# Perform the NMDS using the Jaccard Index
set.seed(123)
nmds <- vegan::metaMDS(df3[-c(1:2)], distance = "jaccard")  # Change here to Jaccard
# Some selection criteria for display
spec_disp    <- envfit(nmds, df3[-c(1:2)])
display_only <- names(spec_disp$vectors$pvals)[spec_disp$vectors$pvals < 0.1]
# Create a list to store the information we want to display together
positions_nmds <- list()
# The position of all species in a data frame called species
positions_nmds[["species"]]              <- cbind.data.frame(nmds$species)
colnames(positions_nmds[["species"]])    <- c("MDS1", "MDS2")
positions_nmds[["species"]]              <- positions_nmds$species[rownames(positions_nmds$species) %in% display_only,]
# The position of all areas (sites)
positions_nmds[["sites"]] <- cbind.data.frame(nmds$points)
# Sites and species data frames
sites_df   <- positions_nmds$sites
species_df <- positions_nmds$species
# Extract the areas from the rownames to create the hulls
sites_df$group <- do.call(rbind, strsplit(rownames(sites_df), " "))[,1]
# Create separate list to generate a hull to plot
mds_hull   <- split(sites_df, sites_df$group)
mds_hull2  <- do.call(rbind, lapply(mds_hull, function(x) x[chull(x[c("MDS1", "MDS2")]),]))
rownames(mds_hull2) <- NULL
# Define the desired order of the Untersuchungsgebiete
desired_order <- c("Halima", "Lippeschlinge", "Lippebogen", "Selm", "Damann")
sites_df$group <- factor(sites_df$group, levels = desired_order)
# Define colors in the correct order
col_df <- data.frame(group = desired_order, col = c("dodgerblue3", "green4", "yellow", "orange", "tomato3"))
# Updated ggplot code
fig1b <- ggplot(sites_df, aes(MDS1, MDS2, col = group)) +  # Use the group column
labs(col = "Untersuchungsgebiete", fill = "Untersuchungsgebiete") +
annotate("text", x = species_df$MDS1, y = species_df$MDS2, label = rownames(species_df), size = 3) +
geom_vline(xintercept = 0, lty = 2) +
geom_hline(yintercept = 0, lty = 2) +
geom_point(size = 2, pch = 19) +
geom_polygon(data = mds_hull2, aes(x = MDS1, y = MDS2, group = group, fill = group),
inherit.aes = F, alpha = 0.2) +
scale_fill_manual(values = col_df$col, breaks = col_df$group) +
scale_color_manual(values = col_df$col, breaks = col_df$group) +
ggtitle("NMDS Plotdaten, Zeitpunkte") +
theme(axis.line = element_line(colour = "black", linewidth = .4),
axis.text = element_text(colour = "black"),
legend.position = "bottom",
legend.spacing = unit(0.01, "cm"),
legend.text = element_text(size = 10),
panel.border = element_rect(colour = "black", fill = NA, size = .6),
legend.key = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10))
ggsave(fig1b, filename = "C:/Users/cschu/iCloudDrive/Biodiv Master/4. Semester/Masterarbeit/R/Durchgänge_nötig/fig_3a.JPEG",
width = 210, height = 120, units = "mm")
fig1b

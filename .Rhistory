for(i in 1:n_sim){
vec[i,] <- cbind(dfmu[i, model$BUGSoutput$sims.list$post_prob[i]], dfsd[i])}
post_iter                 <- table(model$BUGSoutput$sims.list$post_prob)
missing                   <- sum(c(1:arg_list$mod_number) %in% names(post_iter) == F)
mis_vec                   <- rep(0, missing)
names(mis_vec)            <- c(which(c(1:arg_list$mod_number) %in% names(post_iter)==F))
post_iter                 <- c(post_iter/sum(post_iter), mis_vec)
post_iter                 <- post_iter[order(as.numeric(names(post_iter)))]
post_prior_odds           <- (post_iter/prior_prob)/(1+(post_iter/prior_prob))
names(post_prior_odds)    <- mod_names
bar_df                    <- data.frame(x=rep(c("Posterior", "Prior"), each=arg_list$mod_number),
y=c(post_iter, arg_list$prior_prob),
m=rep(mod_names, 2))
bf_list                   <- vector("list", arg_list$mod_number^2)
for(i in 1:length(post_iter)){
for(j in 1:length(post_iter)){
if(i >= j) { bf_list[[paste(mod_names[i], mod_names[j])]] <- cbind(mod_names[i],mod_names[j],round(plogis(-1*log((post_iter[i]/post_iter[j])/(prior_prob[i]/prior_prob[j]))), 2))}
}}
bf_df           <- do.call(rbind.data.frame, bf_list)
rownames(bf_df) <- NULL
bf_df$V1 <- factor(bf_df$V1, levels=mod_names)
bf_df$V2 <- factor(bf_df$V2, levels=mod_names)
bf_df$V3 <- as.numeric(bf_df$V3)
bar_df$m <- factor(bar_df$m, levels=mod_names)
plhist <- ggplot(data.frame(z=z), aes(z))+
xlab("z")+geom_vline(xintercept = 1.96, col="tomato3", lty=2)+
geom_histogram(col="black", fill="grey80",
alpha=0.5, position="identity",
bins = 8, binwidth = 0.5,
boundary = 0, closed = "left")+
theme_classic()
plpostprior <- ggplot(bar_df, aes(x=m, y=y, fill=x))+
geom_bar(position="dodge", stat="identity",col="black")+
ylab("Probability")+labs(fill=NULL)+
scale_fill_manual(breaks = c("Prior", "Posterior"),
values = c("grey80", "grey20"))+
theme_classic()+
theme(axis.title.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 25, hjust=1))
plhist
plpostprior
plpostprior <- ggplot(bar_df, aes(x=m, y=y, fill=x))+
geom_bar(position="dodge", stat="identity",col="black")+
ylab("Probability")+labs(fill=NULL)+
scale_fill_manual(breaks = c("Prior", "Posterior"),
values = c("grey80", "grey20"))+
theme_classic()+
theme(axis.title.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 25, hjust=1))
plbf <- ggplot(bf_df, aes(V1, V2, fill=V3))+
geom_tile()+theme_classic()+
labs(fill="Ln(BF)")+scale_y_discrete(limits=rev)+
scale_fill_gradientn(colours = c("tomato3", "white", "dodgerblue4"),
#values = c(-Inf, 0, Inf),
#limits = c(-Inf, Inf)
)+
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 25, hjust=1))
plbf
zdens <- density(arg_list$z1, bw=0.1)
zdens <- data.frame(x=zdens$x, y=zdens$y)
zdens <- zdens[zdens$x>0,]
hoplines <- list()
x        <- seq(0, max(zdens$x), 0.01)
n_hop    <- sample(n_sim, 150, F)
rt <- list()
for(i in n_hop){
rsim    <- truncnorm::rtruncnorm(arg_list$n, a = 0, b=Inf, mean = vec[i,1], sd= vec[i,2])
rsim    <- density(rsim, bw=0.1)
dfsim   <- data.frame(x=rsim$x, y=rsim$y)
dfsim   <- dfsim[dfsim$x>=0,]
rt[[i]] <- cbind(i, x=dfsim$x, y=dfsim$y, ystandard=dfsim$y/max(dfsim$y))
}
hop_df   <- do.call(rbind.data.frame, rt)
exp_df   <- data.frame(x=x, y=truncnorm::dtruncnorm(x, a = 0, b=Inf, mean = mean(vec[,1]), sd= mean(vec[i,2])))
exp_df$y <- exp_df$y/max(exp_df$y)
actual_expected <- ggplot(hop_df, aes(x, y, group=i))+
geom_line(alpha=0.5, col="grey80")+xlab("z")+
ylab("Scaled density")+
geom_line(data=zdens, aes(x, y), inherit.aes = F)+
geom_vline(xintercept = 1.96, lty=2, col="tomato3")+
theme_classic()+scale_alpha(guide = 'none')
actual_expected
samp_dens  <- data.frame(x=zdens$x, y=zdens$y)
samp_dens$y<- samp_dens$y/sum(samp_dens$y)
vec_over   <- rep(NA, n_sim)
samp_dens
for(i in 1:n_sim){
vec_over[i] <- sum(sample(samp_dens$x, arg_list$n, T, prob = samp_dens$y)>truncnorm::rtruncnorm(arg_list$n, a=0, b=Inf, vec[i,1], vec[i,2]))/arg_list$n}
overest_dens <- density(vec_over)
#Max A Priori density (MAP)
maxpost <- function(x){d <- density(x,bw=0.1); d$x[which.max(d$y)]}
#set interval
interval_level              <- 0.5+c(-1,1)*interval/2
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/max(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over, interval_level[1])), xmax=as.numeric(quantile(vec_over, interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
cowplot::plot_grid(actual_expected, overex, labels = "AUTO")
pnorm(0.05)
qnorm(1 - p/2)
qnorm(1 - 0.05/2)
sig_level=0.05
zdata>zdata
sig_z      <- qnorm(1 - sig_level/2)
zdata>sig_z
zdata <- sample(samp_dens$x, arg_list$n, T, prob = samp_dens$y)
zexp  <- truncnorm::rtruncnorm(arg_list$n, a=0, b=Inf, vec[i,1], vec[i,2])
zdata>sig_z
sum(zdata>sig_z)
sum(zexp>sig_z)
sum(zdata>sig_z)/arg_list$n
sum(zexp>sig_z)/arg_list$n
vec_over   <- array(NA, dim=c(n_sim,3))
vec_over
zdata <- sample(samp_dens$x, arg_list$n, T, prob = samp_dens$y)
zexp  <- truncnorm::rtruncnorm(arg_list$n, a=0, b=Inf, vec[i,1], vec[i,2])
sig_data            <- sum(zdata>sig_z)/arg_list$n
sig_adjusted        <- sum(zexp>sig_z)/arg_list$n
overlap_exageration <- sum(zdata>zexp)/arg_list$n
c(sig_data, sig_adjusted, overlap_exageration)
0.54/0.37
(0.54/0.37)/(1+(0.54/0.37)/)
(0.54/0.37)/(1+(0.54/0.37))
plogis(log(sig_data/sig_adjusted))
samp_dens  <- data.frame(x=zdens$x, y=zdens$y)
samp_dens$y<- samp_dens$y/sum(samp_dens$y)
vec_over   <- array(NA, dim=c(n_sim,2))
sig_z      <- qnorm(1 - sig_level/2)
for(i in 1:n_sim){
zdata <- sample(samp_dens$x, arg_list$n, T, prob = samp_dens$y)
zexp  <- truncnorm::rtruncnorm(arg_list$n, a=0, b=Inf, vec[i,1], vec[i,2])
sig_data            <- sum(zdata>sig_z)/arg_list$n
sig_adjusted        <- sum(zexp>sig_z)/arg_list$n
overlap_exageration <- sum(zdata>zexp)/arg_list$n
sig_exageration     <- plogis(log(sig_data/sig_adjusted))
vec_over[i,] <- c(sig_exageration, overlap_exageration)}
overest_dens <- density(vec_over[i,])
#Max A Priori density (MAP)
maxpost <- function(x){d <- density(x,bw=0.1); d$x[which.max(d$y)]}
#set interval
interval_level              <- 0.5+c(-1,1)*interval/2
overest_dens <- density(vec_over[,1])
sig_dens     <- density(vec_over[,1])
overest_dens <- density(vec_over[,2])
#Max A Priori density (MAP)
maxpost <- function(x){d <- density(x,bw=0.1); d$x[which.max(d$y)]}
#set interval
interval_level              <- 0.5+c(-1,1)*interval/2
plot(sig_dens)
overex
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/max(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over, interval_level[1])), xmax=as.numeric(quantile(vec_over, interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
sig_dens     <- density(vec_over[,1])
overest_dens <- density(vec_over[,2])
#Max A Priori density (MAP)
maxpost <- function(x){d <- density(x,bw=0.1); d$x[which.max(d$y)]}
#set interval
interval_level              <- 0.5+c(-1,1)*interval/2
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/max(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over, interval_level[1])), xmax=as.numeric(quantile(vec_over, interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
sig_exageration
overlap_exageration
sig_dens     <- density(vec_over[,1])
overest_dens <- density(vec_over[,2])
#Max A Priori density (MAP)
maxpost <- function(x){d <- density(x,bw=0.1); d$x[which.max(d$y)]}
#set interval
interval_level              <- 0.5+c(-1,1)*interval/2
ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over, interval_level[1])), xmax=as.numeric(quantile(vec_over, interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(overest_dens), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(overest_dens, interval_level[1])), xmax=as.numeric(quantile(overest_dens, interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(overest_dens), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(overest_dens, interval_level[1])), xmax=as.numeric(quantile(overest_dens, interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(overest_dens), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(overest_dens[,2], interval_level[1])), xmax=as.numeric(quantile(overest_dens[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
overex <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
overex
overex <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=8))
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of significance selection")+ylab("Density")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank())
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of continues overexaggeration")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=8))
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of signifciance selection")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=8))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
sig_z
paste("z>", round(sig_z), "and p<", sig_level)
paste0("z>", round(sig_z), " and p<", sig_level)
paste0("z>", round(sig_z,3), " and p<", sig_level)
paste0("z>", round(sig_z,3), " and p<", sig_level)
paste0("z>", round(sig_z,2), " and p<", sig_level)
paste0("Probability of signifcance selection at \nz>", round(sig_z,2), " and p<", sig_level)
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab(paste0("Probability of signifcance selection at \nz>", round(sig_z,2), " and p<", sig_level))+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=8))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of z-value overexaggeration P(z(data)>z(adjusted))")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=8))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of z-value overexaggeration \nP(z(data)>z(adjusted))")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=8))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab(paste0("Probability of signifcance selection at \nz>", round(sig_z,2), " and p<", sig_level))+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=12))
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of z-value overexaggeration \nP(z(data)>z(adjusted))")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=12))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab(paste0("Probability of signifcance selection at \nz>", round(sig_z,2), " and p<", sig_level))+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=10))
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of z-value overexaggeration \nP(z(data)>z(adjusted))")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=10))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
sig_level=0.05
mu_1=c(0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4)
sd_1=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
mu_2=c(0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4)
sd_2=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
trunc_low_1=c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
trunc_high_1=c(100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100)
trunc_low_2=c(0, 0, 0, 0, 0, 0, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96, 1.96)
trunc_high_2=c(100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100)
mod_weights=c(1, 1, 1, 1, 1, 1, 0.05, 0.33, 1, 3, 19, 0.05, 0.33, 1, 3, 19, 0.05, 0.33, 1, 3, 19, 0.05, 0.33, 1, 3, 19, 0.05, 0.33, 1, 3, 19)
mod_names=c("z=0 (H0=true)", "z=1 (weak)", "z=2 (marginal)", "z=3 (moderate)", "z=4 (strong)", "z=5 (very strong)",
"z=0 mix=0.05", "z=0 mix=0.25", "z=0 mix=0.50", "z=0 mix=0.75", "z=0 mix=0.95",
"z=1 mix=0.05", "z=1 mix=0.25", "z=1 mix=0.50", "z=1 mix=0.75", "z=1 mix=0.95",
"z=2 mix=0.05", "z=2 mix=0.25", "z=2 mix=0.50", "z=2 mix=0.75", "z=2 mix=0.95",
"z=3 mix=0.05", "z=3 mix=0.25", "z=3 mix=0.50", "z=3 mix=0.75", "z=3 mix=0.95",
"z=4 mix=0.05", "z=4 mix=0.25", "z=4 mix=0.50", "z=4 mix=0.75", "z=4 mix=0.95")
arg_list <- list(mu_1=mu_1,
sd_1=sd_1,
mu_2=mu_2,
sd_2=sd_2,
trunc_low_1=trunc_low_1,
trunc_high_1=trunc_high_1,
trunc_low_2=trunc_low_2,
trunc_high_2= trunc_high_2,
mod_weights= mod_weights)
if(length(unique(unlist(lapply(arg_list, length))))==1){
mod_number          <- unique(unlist(lapply(arg_list, length)))
arg_list$mod_number <- mod_number
arg_list$prior_prob <- rep(1/arg_list$mod_number, arg_list$mod_number)}else{
stop("Lenght of prior of arguments is not of equal length")}
arg_list$z1           <- abs(z)
arg_list$z1           <- arg_list$z[!is.infinite(arg_list$z)]
arg_list$n            <- length(arg_list$z1)
mod_fun <- function(){
#Likelihood for all possibilities
for (i in 1:n) {
z1[i]                ~ dnorm(mu_z, t);T(0, )}
#Which model to select
post_prob  ~ dcat(prior_prob[1:mod_number])
mu_z       <- sum(inprod(mu[1:mod_number], post_prob == 1:mod_number))
mu_data      ~ dunif(0, 10)
s_data       ~ dunif(0, 5)
t_data       <- 1/s_data^2
s  ~ dunif(0, 5)
t  <- 1/s^2
#Priors for all models mu(z) and s(z)
for (j in 1:mod_number) {
d1[j]  ~ dcat(c((1-(mod_weights[j]/(1+mod_weights[j]))), (mod_weights[j]/(1+mod_weights[j]))))
mu1[j] ~ dnorm(mu_1[j], sd_1[j]);T(trunc_low_1[j], trunc_high_1[j])
mu2[j] ~ dnorm(mu_2[j], sd_2[j]);T(trunc_low_2[j], trunc_high_2[j])
mu[j] <- (equals(d1[j], 1) * mu1[j] + equals(d1[j], 2) * mu2[j])
}
}
model <-jags.parallel(data = arg_list,
model.file = mod_fun,
parameters.to.save =  c("mu", "post_prob", "mu_data", "s"),
n.chains = 26,
n.thin = 1,
jags.seed = 123,
n.iter = 2000,
n.burnin =500)
closeAllConnections()
dfmu <- model$BUGSoutput$sims.list$mu
dfsd <- model$BUGSoutput$sims.list$s
dfmd <- model$BUGSoutput$sims.list$mu_data
n_sim<- model$BUGSoutput$n.sims
vec  <- array(NA,  dim=c(n_sim,2))
for(i in 1:n_sim){
vec[i,] <- cbind(dfmu[i, model$BUGSoutput$sims.list$post_prob[i]], dfsd[i])}
post_iter                 <- table(model$BUGSoutput$sims.list$post_prob)
missing                   <- sum(c(1:arg_list$mod_number) %in% names(post_iter) == F)
mis_vec                   <- rep(0, missing)
names(mis_vec)            <- c(which(c(1:arg_list$mod_number) %in% names(post_iter)==F))
post_iter                 <- c(post_iter/sum(post_iter), mis_vec)
post_iter                 <- post_iter[order(as.numeric(names(post_iter)))]
post_prior_odds           <- (post_iter/prior_prob)/(1+(post_iter/prior_prob))
names(post_prior_odds)    <- mod_names
bar_df                    <- data.frame(x=rep(c("Posterior", "Prior"), each=arg_list$mod_number),
y=c(post_iter, arg_list$prior_prob),
m=rep(mod_names, 2))
bf_list                   <- vector("list", arg_list$mod_number^2)
for(i in 1:length(post_iter)){
for(j in 1:length(post_iter)){
if(i >= j) { bf_list[[paste(mod_names[i], mod_names[j])]] <- cbind(mod_names[i],mod_names[j],round(plogis(-1*log((post_iter[i]/post_iter[j])/(prior_prob[i]/prior_prob[j]))), 2))}
}}
bf_df           <- do.call(rbind.data.frame, bf_list)
rownames(bf_df) <- NULL
bf_df$V1 <- factor(bf_df$V1, levels=mod_names)
bf_df$V2 <- factor(bf_df$V2, levels=mod_names)
bf_df$V3 <- as.numeric(bf_df$V3)
bar_df$m <- factor(bar_df$m, levels=mod_names)
plhist <- ggplot(data.frame(z=z), aes(z))+
xlab("z")+geom_vline(xintercept = qnorm(1 - sig_level/2), col="tomato3", lty=2)+
geom_histogram(col="black", fill="grey80",
alpha=0.5, position="identity",
bins = 8, binwidth = 0.5,
boundary = 0, closed = "left")+
theme_classic()
plpostprior <- ggplot(bar_df, aes(x=m, y=y, fill=x))+
geom_bar(position="dodge", stat="identity",col="black")+
ylab("Probability")+labs(fill=NULL)+
scale_fill_manual(breaks = c("Prior", "Posterior"),
values = c("grey80", "grey20"))+
theme_classic()+
theme(axis.title.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 25, hjust=1))
plbf <- ggplot(bf_df, aes(V1, V2, fill=V3))+
geom_tile()+theme_classic()+
labs(fill="Ln(BF)")+scale_y_discrete(limits=rev)+
scale_fill_gradientn(colours = c("tomato3", "white", "dodgerblue4"),
#values = c(-Inf, 0, Inf),
#limits = c(-Inf, Inf)
)+
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 25, hjust=1))
zdens <- density(arg_list$z1, bw=0.1)
zdens <- data.frame(x=zdens$x, y=zdens$y)
zdens <- zdens[zdens$x>0,]
hoplines <- list()
x        <- seq(0, max(zdens$x), 0.01)
n_hop    <- sample(n_sim, 150, F)
rt <- list()
for(i in n_hop){
rsim    <- truncnorm::rtruncnorm(arg_list$n, a = 0, b=Inf, mean = vec[i,1], sd= vec[i,2])
rsim    <- density(rsim, bw=0.1)
dfsim   <- data.frame(x=rsim$x, y=rsim$y)
dfsim   <- dfsim[dfsim$x>=0,]
rt[[i]] <- cbind(i, x=dfsim$x, y=dfsim$y, ystandard=dfsim$y/max(dfsim$y))
}
hop_df   <- do.call(rbind.data.frame, rt)
exp_df   <- data.frame(x=x, y=truncnorm::dtruncnorm(x, a = 0, b=Inf, mean = mean(vec[,1]), sd= mean(vec[i,2])))
exp_df$y <- exp_df$y/max(exp_df$y)
actual_expected <- ggplot(hop_df, aes(x, y, group=i))+
geom_line(alpha=0.5, col="grey80")+xlab("z")+
ylab("Scaled density")+
geom_line(data=zdens, aes(x, y), inherit.aes = F)+
geom_vline(xintercept = qnorm(1 - sig_level/2), lty=2, col="tomato3")+
theme_classic()+scale_alpha(guide = 'none')
samp_dens  <- data.frame(x=zdens$x, y=zdens$y)
samp_dens$y<- samp_dens$y/sum(samp_dens$y)
vec_over   <- array(NA, dim=c(n_sim,2))
sig_z      <- qnorm(1 - sig_level/2)
for(i in 1:n_sim){
zdata <- sample(samp_dens$x, arg_list$n, T, prob = samp_dens$y)
zexp  <- truncnorm::rtruncnorm(arg_list$n, a=0, b=Inf, vec[i,1], vec[i,2])
sig_data            <- sum(zdata>sig_z)/arg_list$n
sig_adjusted        <- sum(zexp>sig_z)/arg_list$n
overlap_exageration <- sum(zdata>zexp)/arg_list$n
sig_exageration     <- plogis(log(sig_data/sig_adjusted))
vec_over[i,] <- c(sig_exageration, overlap_exageration)}
sig_dens     <- density(vec_over[,1])
overest_dens <- density(vec_over[,2])
#Max A Priori density (MAP)
maxpost <- function(x){d <- density(x,bw=0.1); d$x[which.max(d$y)]}
#set interval
interval_level              <- 0.5+c(-1,1)*interval/2
sigover <- ggplot(data.frame(x=sig_dens$x, y=sig_dens$y/sum(sig_dens$y)), aes(x, y))+
geom_line()+xlab(paste0("Probability of signifcance selection at \nz>", round(sig_z,2), " and p<", sig_level))+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,1]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,1], interval_level[1])), xmax=as.numeric(quantile(vec_over[,1], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=10))
conover <- ggplot(data.frame(x=overest_dens$x, y=overest_dens$y/sum(overest_dens$y)), aes(x, y))+
geom_line()+xlab("Probability of z-value overexaggeration \nP(z(data)>z(adjusted))")+ylab("Density")+
geom_vline(xintercept = 0.5, lty=2, col="tomato3")+
geom_point(aes(x=maxpost(vec_over[,2]), y=0), inherit.aes = F, size=2)+
geom_errorbarh(aes(xmin=as.numeric(quantile(vec_over[,2], interval_level[1])), xmax=as.numeric(quantile(vec_over[,2], interval_level[2])),
y=0), height=0)+
theme_classic()+theme(axis.title.y = element_blank(),
axis.title.x = element_text(size=10))
cowplot::plot_grid(actual_expected, cowplot::plot_grid(sigover, conover, ncol=2, labels = c("B", "C")), ncol=1, labels = "A")
plpostprior
citation()

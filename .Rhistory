zvec     <- array(NA, dim=c(length(other), 4))
for(i in 1:length(other)){
musd        <- other[[i]][,j]
zvec[i,1]   <- abs((musd[1] - spec[1,j]) / spec[2,j])
zvec[i,2]   <- musd[1]*exp(-zvec[i,1])
zvec[i,3]   <- abs((musd[2] - spec[2,j]) / spec[2,j])
zvec[i,4]   <- musd[2]*exp(-zvec[i,3])}
spec_list$present[[t]][1,j] <- posterior_mu(musd[1], musd[2],
sum(zvec[,1]*zvec[,2])/sum(zvec[,1]),
sum(zvec[,3]*zvec[,4])/sum(zvec[,3]))
}}
predict <- function(mod, new){
post_df    <- as.data.frame(array(NA, dim=c(length(mod$present),2)))
post_df$V1 <- names(mod$present)[order(names(mod$present))]
for(j in 1:length(mod[[1]])){
present <- mod[["present"]][[j]]
absent  <- mod[["absent"]][[j]]
p1 <- (n_spec[j,2]/n_samp)
p0 <- ((n_samp-n_spec[j,2])/n_samp)
y1 <- as.numeric()
y0 <- as.numeric()
for(k in pred_names){
x     <- as.numeric(xd[k])
y1[k] <- dlnorm(x, present[1,which(colnames(present) == k)], present[2,which(colnames(present) == k)])
y0[k] <- dlnorm(x, absent[1,which(colnames(absent) == k)], absent[2,which(colnames(absent) == k)])
}
post_df[j,2] <- (prod(y1)*p1)/(prod(y1)*p1+prod(y0)*p0)}
post_df}
xd      <- data.frame(pH=8.2, EC=900, Temp=18, NO3=1, PO4=0.15)
pred_df <- predict(spec_list, xd)
ggplot(pred_df, aes(x=reorder(V1, -V2, mean), weight=V2, fill=V2))+ylab("Posterior probability P(Taxa|Data)")+
geom_bar(col="black")+theme_classic()+scale_fill_gradient(low="grey100", high = "grey0", limits=c(0,1))+labs(fill="P(Taxa|Data)")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
View(spec_list)
exp(2.090)
xd      <- data.frame(pH=7.6, EC=500, Temp=16, NO3=1, PO4=0.1)
pred_df <- predict(spec_list, xd)
ggplot(pred_df, aes(x=reorder(V1, -V2, mean), weight=V2, fill=V2))+ylab("Posterior probability P(Taxa|Data)")+
geom_bar(col="black")+theme_classic()+scale_fill_gradient(low="grey100", high = "grey0", limits=c(0,1))+labs(fill="P(Taxa|Data)")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
library(EcoPostView)
colMeans(log(df[-1]))
colMeans(log(df[-1:2]))
df[-1:2]
df[-1:2]
df[-1:2]
colMeans(log(df[-c(1:2)]))
colMeans(log(df[-c(1:2)]), na.rm = T)
exp(6)
exp(2)
apply(log(df[-c(1:2)]), 2, sd)
apply(log(df[-c(1:2)]), 2, FUN=sd)
apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))
cbind("all", colMeans(log(df[-c(1:2)]), na.rm = T)
apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T)))
cbind("all", colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T)))
rbind("all", colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T)))
rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T)))
cbind("all", rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T)))
cbind("all", rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
cbind("all", rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
cbind.data.frame("all", rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
cbind.data.frame(all, rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
cbind.data.frame('all', rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
total <- cbind.data.frame('all', rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
colnames(total)[1] <- "Taxon"
total
colnames(total)[1] <- "Species"
total <- cbind.data.frame('all', rbind(colMeans(log(df[-c(1:2)]), na.rm = T), apply(log(df[-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
colnames(total)[1] <- "Species"
n_spec     <- as.data.frame(table(df$Species))
pred_names <- colnames(df)[-c(1:2)]
spec_list        <- vector("list", 2)
names(spec_list) <- c("present", "absent")
for(i in unique(df$Species)){
present        <- df[df$Species == i,]
absent         <- df[!df$ID %in% present$ID,]
absent         <- absent[!duplicated(absent$ID),]
absent$Species <- i
est_par <- function(d,i){
g <- as.data.frame(apply(d[-c(1:2)], 2, function(x) c(mean(log(x), na.rm=T), sd(log(x), na.rm = T))))
cbind(Taxon=i, g)}
present <- est_par(present, i)
spec_list[["present"]][[i]] <- present
spec_list[["absent"]][[i]]  <- est_par(absent, i)}
spec_list[["present"]] <- Filter(function(df) !any(is.na(df)),  spec_list[["present"]])
spec_list[["absent"]]  <- spec_list[["absent"]][names(spec_list[["present"]])]
n_spec                 <- n_spec[n_spec$Var1 %in% names(spec_list$present),]
n_spec$Var1  <- factor(n_spec$Var1, levels = names(spec_list$present))
n_spec       <- n_spec[order(n_spec$Var1),]
df_subset    <- df[df$Species %in% n_spec$Var1,]
n_samp       <- length(unique(df$ID))
posterior_mu <- function(data_mu, data_sigma, prior_mu, prior_sigma){
((prior_mu/prior_sigma^2)+(data_mu/data_sigma^2))/((1/prior_sigma^2)+(1/data_sigma^2))}
predict <- function(mod, new){
post_df    <- as.data.frame(array(NA, dim=c(length(mod$present),2)))
post_df$V1 <- names(mod$present)[order(names(mod$present))]
for(j in 1:length(mod[[1]])){
present <- mod[["present"]][[j]]
absent  <- mod[["absent"]][[j]]
p1 <- (n_spec[j,2]/n_samp)
p0 <- ((n_samp-n_spec[j,2])/n_samp)
y1 <- as.numeric()
y0 <- as.numeric()
for(k in pred_names){
x     <- as.numeric(xd[k])
y1[k] <- dlnorm(x, present[1,which(colnames(present) == k)], present[2,which(colnames(present) == k)])
y0[k] <- dlnorm(x, absent[1,which(colnames(absent) == k)], absent[2,which(colnames(absent) == k)])
}
post_df[j,2] <- (prod(y1)*p1)/(prod(y1)*p1+prod(y0)*p0)}
post_df}
xd      <- data.frame(pH=7.6, EC=500, Temp=16, NO3=1, PO4=0.1)
pred_df <- predict(spec_list, xd)
ggplot(pred_df, aes(x=reorder(V1, -V2, mean), weight=V2, fill=V2))+ylab("Posterior probability P(Taxa|Data)")+
geom_bar(col="black")+theme_classic()+scale_fill_gradient(low="grey100", high = "grey0", limits=c(0,1))+labs(fill="P(Taxa|Data)")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
total$EC
for(t in 1:length(spec_list$present)){}
spec_list$present[[t]]
spec <- spec_list$present[[t]]
total
df[!duplicated(df$ID)]
df[!duplicated(df$ID),]
total <- cbind.data.frame('all', rbind(colMeans(log(df[!duplicated(df$ID),][-c(1:2)]), na.rm = T), apply(log(df[!duplicated(df$ID),][-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
colnames(total)[1] <- "Taxon"
total
dfsub <- df[!duplicated(df$ID),]
df <- df[rowSums(df == 0, na.rm = TRUE) == 0, ]
total <- cbind.data.frame('all', rbind(colMeans(log(df[!duplicated(df$ID),][-c(1:2)]), na.rm = T), apply(log(df[!duplicated(df$ID),][-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
colnames(total)[1] <- "Taxon"
n_spec     <- as.data.frame(table(df$Species))
pred_names <- colnames(df)[-c(1:2)]
spec_list        <- vector("list", 2)
names(spec_list) <- c("present", "absent")
for(i in unique(df$Species)){
present        <- df[df$Species == i,]
absent         <- df[!df$ID %in% present$ID,]
absent         <- absent[!duplicated(absent$ID),]
absent$Species <- i
est_par <- function(d,i){
g <- as.data.frame(apply(d[-c(1:2)], 2, function(x) c(mean(log(x), na.rm=T), sd(log(x), na.rm = T))))
cbind(Taxon=i, g)}
present <- est_par(present, i)
spec_list[["present"]][[i]] <- present
spec_list[["absent"]][[i]]  <- est_par(absent, i)}
spec_list[["present"]] <- Filter(function(df) !any(is.na(df)),  spec_list[["present"]])
spec_list[["absent"]]  <- spec_list[["absent"]][names(spec_list[["present"]])]
n_spec                 <- n_spec[n_spec$Var1 %in% names(spec_list$present),]
n_spec$Var1  <- factor(n_spec$Var1, levels = names(spec_list$present))
n_spec       <- n_spec[order(n_spec$Var1),]
df_subset    <- df[df$Species %in% n_spec$Var1,]
n_samp       <- length(unique(df$ID))
spec    <- spec_list$present[[t]]
total
?abmeta
spec[1,1]
spec[1,2]
spec[2,2]
abmeta(spec[1,2], spec[2,2], total[1,2], total[2,2])
total[1,2]
total[2,2]
spec[1,2]
spec[2,2]
#' @param interval Credibility intervals for the summary (default=0.9)
#' @param RE An argument indicating if RE or FE should be used (default RE=TRUE)
#'
#' @description
#' Analytical Bayesian meta-analysis with random-effect (RE) or fixed-effect (FE). For the estimation for
#' tau^2 the DSL DerSimonian and Laird (1986). This approach is easy yet slightly underestimates the 'true'
#' variance (O Bai et al. 2016). That being said the between study variance is therefore treated as having an
#' improper uniform prior, which simplifies most calculations.
#'
#' @export
abmeta <- function(estimate, stderr, prior_mu=0, prior_se=1000, prior_weights=NULL,
interval=0.9, RE=T, warnings=F) {
#Give warning if estimate length is 1
if(length(estimate) == 1){RE <- F;   if(warnings==T){warning("Number of estimates is 1 then RE is automatically set to FALSE.")}}
#Stop if estimate an se are not of the same length
if(length(estimate) != length(stderr)){stop("Vector of estimates is not of the same length as the vector of standard errors.")}
#If length weights is not length of priors then set to average
if(length(prior_mu) && !is.null(prior_weights) != length(prior_weights)){ if(is.null(prior_weights)){prior_weights <- rep(1/length(prior_mu), length(prior_mu))}}
if(is.null(prior_weights)){prior_weights <- rep(1/length(prior_mu), length(prior_mu))}
#Analytical posterior based on conjugation
postvals <- function(data_mu, data_sigma, prior_mu, prior_sigma){
post_mu <- (prior_mu/prior_sigma^2+sum(data_mu / data_sigma^2))/
(1/prior_sigma^2+sum(1/data_sigma^2))
post_sigma <- sqrt(1/((1/prior_sigma^2)+sum(1/data_sigma^2)))
return(c(mu = post_mu, sigma = post_sigma))}
#Loop over all priors
posteriors <- sapply(1:length(prior_mu), function(k){
postvals(estimate, stderr, prior_mu[k], prior_se[k])})
#Extract posterior
post_mu    <- posteriors["mu", ]
post_se    <- posteriors["sigma", ]
#Calculate the  BMA
pooled     <- sum(prior_weights * post_mu)
se         <- sqrt(sum(prior_weights*(post_se^2+post_mu^2))-pooled^2)
#RE Model
if (RE == T){
#weights and pooled mu
w      <- 1/stderr^2
pooled <- sum(estimate*w)/sum(w)
#DL method for tau2
Q      <- sum(w*(estimate-pooled)^2)
tau2   <- max(0, (Q-(length(estimate)-1))/(sum(w)-sum(w^2)/sum(w)))
#Use tau2 for new posteriors
posteriors <- sapply(1:length(prior_mu), function(k) {
postvals(estimate, sqrt(stderr^2+tau2), prior_mu[k], prior_se[k])})
#Extract posterior
post_mu <- posteriors["mu", ]
post_se <- posteriors["sigma", ]
#Calculate the  BMA
pooled <- sum(prior_weights*post_mu)
se     <- sqrt(sum(prior_weights*(post_se^2+post_mu^2))-pooled^2)}
#Simple ETI intervals because its is normal ETI is HDI
ci <- pooled + se * c(-1, 1) * qnorm(interval + ((1 - interval) / 2))
return(round(c(mu=as.numeric(pooled), se=as.numeric(se), ll=ci[1], ul=ci[2]), 4))}
abmeta(spec[1,2], spec[2,2], total[1,2], total[2,2])
library(EcoPostView)
abmeta(spec[1,2], spec[2,2], total[1,2], total[2,2])
spec_list$present[[t]]
spec_list$present[[t]][1,2]
for(t in 1:length(spec_list$present)){
for(v in 2:(length(pred_names)+1)){
spec    <- spec_list$present[[t]]
spec_list$present[[t]] <- spec_list$present[[t]]abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
for(t in 1:length(spec_list$present)){
for(v in 2:(length(pred_names)+1)){
spec    <- spec_list$present[[t]]
spec_list$present[[t]] <- abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])}}
v
spec_list$present[[t]]
for(t in 1:length(spec_list$present)){
for(v in 2:(length(pred_names)+1)){
spec    <- spec_list$present[[t]]
spec_list$present[[t]][1,v] <- abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])}}
predict <- function(mod, new){
post_df    <- as.data.frame(array(NA, dim=c(length(mod$present),2)))
post_df$V1 <- names(mod$present)[order(names(mod$present))]
for(j in 1:length(mod[[1]])){
present <- mod[["present"]][[j]]
absent  <- mod[["absent"]][[j]]
p1 <- (n_spec[j,2]/n_samp)
p0 <- ((n_samp-n_spec[j,2])/n_samp)
y1 <- as.numeric()
y0 <- as.numeric()
for(k in pred_names){
x     <- as.numeric(xd[k])
y1[k] <- dlnorm(x, present[1,which(colnames(present) == k)], present[2,which(colnames(present) == k)])
y0[k] <- dlnorm(x, absent[1,which(colnames(absent) == k)], absent[2,which(colnames(absent) == k)])
}
post_df[j,2] <- (prod(y1)*p1)/(prod(y1)*p1+prod(y0)*p0)}
post_df}
for(t in 1:length(spec_list$present)){
for(v in 2:(length(pred_names)+1)){
spec    <- spec_list$present[[t]]
spec_list$present[[t]][1,v] <- abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])}}
spec_list$present[[t]][1,v]
for(t in 1:length(spec_list$present)){
for(v in 2:(length(pred_names)+1)){
spec    <- spec_list$present[[t]]
spec_list$present[[t]][1,v] <- abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])[1]}}
abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])[1]
spec    <- spec_list$present[[t]]
spec_list$present[[t]]
df     <- read.csv(url("https://raw.githubusercontent.com/snwikaij/Data/refs/heads/main/Hydrobiologia_Kaijser_et_al._2022.csv"), header = T)
df     <- df[!duplicated(paste(df$ID, df$Species)),]
df     <- df[c("Species", "ID", "EC", "NNO3", "pH", "Temp", "PPO4")]
df$NNO3<- df$NNO3/14*62
colnames(df)[4] <- "NO3"
df$PPO4<- df$PPO4/31*95
colnames(df)[7] <- "PO4"
df <- df[df$Species %in% names(table(df$Species))[table(df$Species)>10],]
df <- df[rowSums(df == 0, na.rm = TRUE) == 0, ]
total <- cbind.data.frame('all', rbind(colMeans(log(df[!duplicated(df$ID),][-c(1:2)]), na.rm = T), apply(log(df[!duplicated(df$ID),][-c(1:2)]), 2, function(x) sd(x, na.rm = T))))
colnames(total)[1] <- "Taxon"
#function(taxa, env, id, group=NULL, minimal=10)
n_spec     <- as.data.frame(table(df$Species))
pred_names <- colnames(df)[-c(1:2)]
spec_list        <- vector("list", 2)
names(spec_list) <- c("present", "absent")
for(i in unique(df$Species)){
present        <- df[df$Species == i,]
absent         <- df[!df$ID %in% present$ID,]
absent         <- absent[!duplicated(absent$ID),]
absent$Species <- i
est_par <- function(d,i){
g <- as.data.frame(apply(d[-c(1:2)], 2, function(x) c(mean(log(x), na.rm=T), sd(log(x), na.rm = T))))
cbind(Taxon=i, g)}
present <- est_par(present, i)
spec_list[["present"]][[i]] <- present
spec_list[["absent"]][[i]]  <- est_par(absent, i)}
spec_list[["present"]] <- Filter(function(df) !any(is.na(df)),  spec_list[["present"]])
spec_list[["absent"]]  <- spec_list[["absent"]][names(spec_list[["present"]])]
n_spec                 <- n_spec[n_spec$Var1 %in% names(spec_list$present),]
n_spec$Var1  <- factor(n_spec$Var1, levels = names(spec_list$present))
n_spec       <- n_spec[order(n_spec$Var1),]
df_subset    <- df[df$Species %in% n_spec$Var1,]
n_samp       <- length(unique(df$ID))
abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])[1]
for(t in 1:length(spec_list$present)){
for(v in 2:(length(pred_names)+1)){
spec_list$present[[t]][1,v] <- abmeta(spec_list$present[[t]][1,v],spec_list$present[[t]][2,v],
total[1,v], total[2,v])[1]}}
predict <- function(mod, new){
post_df    <- as.data.frame(array(NA, dim=c(length(mod$present),2)))
post_df$V1 <- names(mod$present)[order(names(mod$present))]
for(j in 1:length(mod[[1]])){
present <- mod[["present"]][[j]]
absent  <- mod[["absent"]][[j]]
p1 <- (n_spec[j,2]/n_samp)
p0 <- ((n_samp-n_spec[j,2])/n_samp)
y1 <- as.numeric()
y0 <- as.numeric()
for(k in pred_names){
x     <- as.numeric(xd[k])
y1[k] <- dlnorm(x, present[1,which(colnames(present) == k)], present[2,which(colnames(present) == k)])
y0[k] <- dlnorm(x, absent[1,which(colnames(absent) == k)], absent[2,which(colnames(absent) == k)])
}
post_df[j,2] <- (prod(y1)*p1)/(prod(y1)*p1+prod(y0)*p0)}
post_df}
xd      <- data.frame(pH=7.6, EC=500, Temp=16, NO3=1, PO4=0.1)
pred_df <- predict(spec_list, xd)
ggplot(pred_df, aes(x=reorder(V1, -V2, mean), weight=V2, fill=V2))+ylab("Posterior probability P(Taxa|Data)")+
geom_bar(col="black")+theme_classic()+scale_fill_gradient(low="grey100", high = "grey0", limits=c(0,1))+labs(fill="P(Taxa|Data)")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
predict <- function(mod, new){
post_df    <- as.data.frame(array(NA, dim=c(length(mod$present),2)))
post_df$V1 <- names(mod$present)[order(names(mod$present))]
for(j in 1:length(mod[[1]])){
present <- mod[["present"]][[j]]
absent  <- mod[["absent"]][[j]]
p1 <- (n_spec[j,2]/n_samp)
p0 <- ((n_samp-n_spec[j,2])/n_samp)
y1 <- as.numeric()
y0 <- as.numeric()
for(k in pred_names){
x     <- as.numeric(xd[k])
y1[k] <- dlnorm(x, present[1,which(colnames(present) == k)], present[2,which(colnames(present) == k)])
y0[k] <- dlnorm(x, absent[1,which(colnames(absent) == k)], absent[2,which(colnames(absent) == k)])
}
post_df[j,2] <- (prod(y1)*p1)/(prod(y1)*p1+prod(y0)*p0)}
post_df}
df$EC
quantile(df$EC, c(.025, .975))
quantile(df$EC, c(.025, .975), na.rm = T)
qa <- quantile(df$EC, c(.025, .975), na.rm = T)
seq(qa[1], qa[2], 1)
predict(spec_list, data.frame(EC=seq(qa[1], qa[2], 1)))
data.frame(EC=seq(qa[1], qa[2], 1)
predict(spec_list, ))
data.frame(EC=seq(qa[1], qa[2], 1))
yhat <- data.frame(EC=seq(qa[1], qa[2], 1))
yhat
predict(spec_list, yhat[i,]))
predict(spec_list, yhat[i,])
yhat[i,]
i
predict(spec_list)
for(i in 1:nrow(yhat)){}
predict(spec_list, yhat[i,])}
yhat <- data.frame(EC=seq(qa[1], qa[2], 1))
for(i in 1:nrow(yhat)){
predict(spec_list, yhat[i,])}
i
predict(spec_list, yhat[i,])
predlist <- list()
yhat <- data.frame(EC=seq(qa[1], qa[2],5))
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[i] <- predict(spec_list, yhat[i,])}
warnings()
yhat <- data.frame(EC=seq(qa[1], qa[2],5))
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])}
do.call(rbind, predlist)
do.call(cbind, predlist)
what <- do.call(cbind, predlist)
View(what)
predict(spec_list, yhat[i,])
predict(spec_list, yhat[i,])[-1]
yhat <- data.frame(EC=seq(qa[1], qa[2],5))
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])[,-1]}
rbind(predlist)
do.call(rbind, predlist)
what <- do.call(rbind, predlist)
View(what)
yhat <- data.frame(EC=seq(qa[1], qa[2],20))
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])[,-1]}
what <- do.call(rbind, predlist)
what
View(what)
yhat <- data.frame(EC=seq(qa[1], qa[2],20),
NO3=total$NO3[1],
pH=total$pH[1],
Temp=total$Temp[1],
PO4=total$PO4)
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])[,-1]}
what <- do.call(rbind, predlist)
what
yhat[i,]
xd <- yhat
pred_df <- predict(spec_list, xd)
xd
yhat[i,]
xd <- yhat[i,]
pred_df <- predict(spec_list, xd)
ggplot(pred_df, aes(x=reorder(V1, -V2, mean), weight=V2, fill=V2))+ylab("Posterior probability P(Taxa|Data)")+
geom_bar(col="black")+theme_classic()+scale_fill_gradient(low="grey100", high = "grey0", limits=c(0,1))+labs(fill="P(Taxa|Data)")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
df$EC
qa <- log(quantile(df$EC, c(.025, .975), na.rm = T))
yhat <- data.frame(EC=seq(qa[1], qa[2],20),
NO3=total$NO3[1],
pH=total$pH[1],
Temp=total$Temp[1],
PO4=total$PO4)
seq(qa[1], qa[2],20)
seq(qa[1], qa[2],20)
seq(qa[1], qa[2],20)
seq(qa[1], qa[2],20)
qa
seq(qa[1], qa[2], 20)
yhat <- data.frame(EC=seq(qa[1], qa[2], length.out=20),
NO3=total$NO3[1],
pH=total$pH[1],
Temp=total$Temp[1],
PO4=total$PO4)
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])[,-1]}
what <- do.call(rbind, predlist)
what
predict(spec_list)
predict(spec_list, yhat[i,])[-1]
what
what <- do.call(cbind, predlist)
View(what)
yhat
yhat[i,]
total$NO3[1]
qa <- quantile(df$EC, c(.025, .975), na.rm = T)
yhat <- data.frame(EC=seq(qa[1], qa[2], length.out=20),
NO3=exp(total$NO3[1]),
pH=exp(total$pH[1]),
Temp=exp(total$Temp[1]),
PO4=exp(total$PO4[1]))
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])[,-1]}
what <- do.call(cbind, predlist)
View(what)
View(what)
yhat[i,]
i=10
predict(spec_list, yhat[i,])
predict(spec_list, yhat[10,])
yhat <- data.frame(EC=seq(qa[1], qa[2], length.out=20),
NO3=2,
pH=7.8,
Temp=18,
PO4=0.15)
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, yhat[i,])[,-1]}
what <- do.call(cbind, predlist)
predict(spec_list, yhat[10,])
predict(spec_list, yhat[10,])
predict(spec_list, yhat[8,])
predict(spec_list, yhat[10,])
predict(spec_list, yhat[8,])
yhat[10,]
yhat[8,]
predict(spec_list, yhat[3,])
predict(spec_list, yhat[15,])
xd      <- data.frame(pH=7.6, EC=500, Temp=16, NO3=1, PO4=0.1)
pred_df <- predict(spec_list, xd)
ggplot(pred_df, aes(x=reorder(V1, -V2, mean), weight=V2, fill=V2))+ylab("Posterior probability P(Taxa|Data)")+
geom_bar(col="black")+theme_classic()+scale_fill_gradient(low="grey100", high = "grey0", limits=c(0,1))+labs(fill="P(Taxa|Data)")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
predict(spec_list, as.data.frame(yhat[3,]))
predict(spec_list, as.data.frame(yhat[15,]))
predict(spec_list, as.data.frame(yhat[3,]))
predict(spec_list, as.data.frame(yhat[15,]))
predict(spec_list, as.data.frame(yhat[3,]))
predict(spec_list, as.data.frame(yhat[15,]))
predlist <- list()
for(i in 1:nrow(yhat)){
predlist[[i]] <- predict(spec_list, as.data.frame(yhat[i,]))[,-1]}
what <- do.call(cbind, predlist)
View(what)
View(what)
what[2,]
